module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.1). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateComment {
  count: Int!
}

type AggregateContent {
  count: Int!
}

type AggregateInterest {
  count: Int!
}

type AggregateLike {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Comment {
  id: ID!
  user: User
  post: Post
  text: String!
  date: DateTime
}

type CommentConnection {
  pageInfo: PageInfo!
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  id: ID
  user: UserCreateOneWithoutCommentsInput
  post: PostCreateOneWithoutCommentsInput
  text: String!
}

input CommentCreateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutUserInput {
  create: [CommentCreateWithoutUserInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateWithoutPostInput {
  id: ID
  user: UserCreateOneWithoutCommentsInput
  text: String!
}

input CommentCreateWithoutUserInput {
  id: ID
  post: PostCreateOneWithoutCommentsInput
  text: String!
}

type CommentEdge {
  node: Comment!
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  date_ASC
  date_DESC
}

type CommentPreviousValues {
  id: ID!
  text: String!
  date: DateTime
}

input CommentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  AND: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
  AND: [CommentSubscriptionWhereInput!]
  OR: [CommentSubscriptionWhereInput!]
  NOT: [CommentSubscriptionWhereInput!]
}

input CommentUpdateInput {
  user: UserUpdateOneWithoutCommentsInput
  post: PostUpdateOneWithoutCommentsInput
  text: String
}

input CommentUpdateManyDataInput {
  text: String
}

input CommentUpdateManyMutationInput {
  text: String
}

input CommentUpdateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutPostInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutPostInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithoutUserInput {
  create: [CommentCreateWithoutUserInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyDataInput!
}

input CommentUpdateWithoutPostDataInput {
  user: UserUpdateOneWithoutCommentsInput
  text: String
}

input CommentUpdateWithoutUserDataInput {
  post: PostUpdateOneWithoutCommentsInput
  text: String
}

input CommentUpdateWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutPostDataInput!
}

input CommentUpdateWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutUserDataInput!
}

input CommentUpsertWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutPostDataInput!
  create: CommentCreateWithoutPostInput!
}

input CommentUpsertWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutUserDataInput!
  create: CommentCreateWithoutUserInput!
}

input CommentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  post: PostWhereInput
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
}

input CommentWhereUniqueInput {
  id: ID
}

type Content {
  id: ID!
  post: Post
  link: String!
  type: Boolean!
}

type ContentConnection {
  pageInfo: PageInfo!
  edges: [ContentEdge]!
  aggregate: AggregateContent!
}

input ContentCreateInput {
  id: ID
  post: PostCreateOneWithoutContentsInput
  link: String!
  type: Boolean!
}

input ContentCreateManyWithoutPostInput {
  create: [ContentCreateWithoutPostInput!]
  connect: [ContentWhereUniqueInput!]
}

input ContentCreateWithoutPostInput {
  id: ID
  link: String!
  type: Boolean!
}

type ContentEdge {
  node: Content!
  cursor: String!
}

enum ContentOrderByInput {
  id_ASC
  id_DESC
  link_ASC
  link_DESC
  type_ASC
  type_DESC
}

type ContentPreviousValues {
  id: ID!
  link: String!
  type: Boolean!
}

input ContentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  link: String
  link_not: String
  link_in: [String!]
  link_not_in: [String!]
  link_lt: String
  link_lte: String
  link_gt: String
  link_gte: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  type: Boolean
  type_not: Boolean
  AND: [ContentScalarWhereInput!]
  OR: [ContentScalarWhereInput!]
  NOT: [ContentScalarWhereInput!]
}

type ContentSubscriptionPayload {
  mutation: MutationType!
  node: Content
  updatedFields: [String!]
  previousValues: ContentPreviousValues
}

input ContentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ContentWhereInput
  AND: [ContentSubscriptionWhereInput!]
  OR: [ContentSubscriptionWhereInput!]
  NOT: [ContentSubscriptionWhereInput!]
}

input ContentUpdateInput {
  post: PostUpdateOneWithoutContentsInput
  link: String
  type: Boolean
}

input ContentUpdateManyDataInput {
  link: String
  type: Boolean
}

input ContentUpdateManyMutationInput {
  link: String
  type: Boolean
}

input ContentUpdateManyWithoutPostInput {
  create: [ContentCreateWithoutPostInput!]
  delete: [ContentWhereUniqueInput!]
  connect: [ContentWhereUniqueInput!]
  set: [ContentWhereUniqueInput!]
  disconnect: [ContentWhereUniqueInput!]
  update: [ContentUpdateWithWhereUniqueWithoutPostInput!]
  upsert: [ContentUpsertWithWhereUniqueWithoutPostInput!]
  deleteMany: [ContentScalarWhereInput!]
  updateMany: [ContentUpdateManyWithWhereNestedInput!]
}

input ContentUpdateManyWithWhereNestedInput {
  where: ContentScalarWhereInput!
  data: ContentUpdateManyDataInput!
}

input ContentUpdateWithoutPostDataInput {
  link: String
  type: Boolean
}

input ContentUpdateWithWhereUniqueWithoutPostInput {
  where: ContentWhereUniqueInput!
  data: ContentUpdateWithoutPostDataInput!
}

input ContentUpsertWithWhereUniqueWithoutPostInput {
  where: ContentWhereUniqueInput!
  update: ContentUpdateWithoutPostDataInput!
  create: ContentCreateWithoutPostInput!
}

input ContentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  post: PostWhereInput
  link: String
  link_not: String
  link_in: [String!]
  link_not_in: [String!]
  link_lt: String
  link_lte: String
  link_gt: String
  link_gte: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  type: Boolean
  type_not: Boolean
  AND: [ContentWhereInput!]
  OR: [ContentWhereInput!]
  NOT: [ContentWhereInput!]
}

input ContentWhereUniqueInput {
  id: ID
}

scalar DateTime

type Interest {
  id: ID!
  user: User
  interesting: String!
}

type InterestConnection {
  pageInfo: PageInfo!
  edges: [InterestEdge]!
  aggregate: AggregateInterest!
}

input InterestCreateInput {
  id: ID
  user: UserCreateOneWithoutInterestsInput
  interesting: String!
}

input InterestCreateManyWithoutUserInput {
  create: [InterestCreateWithoutUserInput!]
  connect: [InterestWhereUniqueInput!]
}

input InterestCreateWithoutUserInput {
  id: ID
  interesting: String!
}

type InterestEdge {
  node: Interest!
  cursor: String!
}

enum InterestOrderByInput {
  id_ASC
  id_DESC
  interesting_ASC
  interesting_DESC
}

type InterestPreviousValues {
  id: ID!
  interesting: String!
}

input InterestScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  interesting: String
  interesting_not: String
  interesting_in: [String!]
  interesting_not_in: [String!]
  interesting_lt: String
  interesting_lte: String
  interesting_gt: String
  interesting_gte: String
  interesting_contains: String
  interesting_not_contains: String
  interesting_starts_with: String
  interesting_not_starts_with: String
  interesting_ends_with: String
  interesting_not_ends_with: String
  AND: [InterestScalarWhereInput!]
  OR: [InterestScalarWhereInput!]
  NOT: [InterestScalarWhereInput!]
}

type InterestSubscriptionPayload {
  mutation: MutationType!
  node: Interest
  updatedFields: [String!]
  previousValues: InterestPreviousValues
}

input InterestSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: InterestWhereInput
  AND: [InterestSubscriptionWhereInput!]
  OR: [InterestSubscriptionWhereInput!]
  NOT: [InterestSubscriptionWhereInput!]
}

input InterestUpdateInput {
  user: UserUpdateOneWithoutInterestsInput
  interesting: String
}

input InterestUpdateManyDataInput {
  interesting: String
}

input InterestUpdateManyMutationInput {
  interesting: String
}

input InterestUpdateManyWithoutUserInput {
  create: [InterestCreateWithoutUserInput!]
  delete: [InterestWhereUniqueInput!]
  connect: [InterestWhereUniqueInput!]
  set: [InterestWhereUniqueInput!]
  disconnect: [InterestWhereUniqueInput!]
  update: [InterestUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [InterestUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [InterestScalarWhereInput!]
  updateMany: [InterestUpdateManyWithWhereNestedInput!]
}

input InterestUpdateManyWithWhereNestedInput {
  where: InterestScalarWhereInput!
  data: InterestUpdateManyDataInput!
}

input InterestUpdateWithoutUserDataInput {
  interesting: String
}

input InterestUpdateWithWhereUniqueWithoutUserInput {
  where: InterestWhereUniqueInput!
  data: InterestUpdateWithoutUserDataInput!
}

input InterestUpsertWithWhereUniqueWithoutUserInput {
  where: InterestWhereUniqueInput!
  update: InterestUpdateWithoutUserDataInput!
  create: InterestCreateWithoutUserInput!
}

input InterestWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  interesting: String
  interesting_not: String
  interesting_in: [String!]
  interesting_not_in: [String!]
  interesting_lt: String
  interesting_lte: String
  interesting_gt: String
  interesting_gte: String
  interesting_contains: String
  interesting_not_contains: String
  interesting_starts_with: String
  interesting_not_starts_with: String
  interesting_ends_with: String
  interesting_not_ends_with: String
  AND: [InterestWhereInput!]
  OR: [InterestWhereInput!]
  NOT: [InterestWhereInput!]
}

input InterestWhereUniqueInput {
  id: ID
}

type Like {
  id: ID!
  user: User
  post: Post
}

type LikeConnection {
  pageInfo: PageInfo!
  edges: [LikeEdge]!
  aggregate: AggregateLike!
}

input LikeCreateInput {
  id: ID
  user: UserCreateOneWithoutLikesInput
  post: PostCreateOneWithoutLikesInput
}

input LikeCreateManyWithoutPostInput {
  create: [LikeCreateWithoutPostInput!]
  connect: [LikeWhereUniqueInput!]
}

input LikeCreateManyWithoutUserInput {
  create: [LikeCreateWithoutUserInput!]
  connect: [LikeWhereUniqueInput!]
}

input LikeCreateWithoutPostInput {
  id: ID
  user: UserCreateOneWithoutLikesInput
}

input LikeCreateWithoutUserInput {
  id: ID
  post: PostCreateOneWithoutLikesInput
}

type LikeEdge {
  node: Like!
  cursor: String!
}

enum LikeOrderByInput {
  id_ASC
  id_DESC
}

type LikePreviousValues {
  id: ID!
}

input LikeScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [LikeScalarWhereInput!]
  OR: [LikeScalarWhereInput!]
  NOT: [LikeScalarWhereInput!]
}

type LikeSubscriptionPayload {
  mutation: MutationType!
  node: Like
  updatedFields: [String!]
  previousValues: LikePreviousValues
}

input LikeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LikeWhereInput
  AND: [LikeSubscriptionWhereInput!]
  OR: [LikeSubscriptionWhereInput!]
  NOT: [LikeSubscriptionWhereInput!]
}

input LikeUpdateInput {
  user: UserUpdateOneWithoutLikesInput
  post: PostUpdateOneWithoutLikesInput
}

input LikeUpdateManyWithoutPostInput {
  create: [LikeCreateWithoutPostInput!]
  delete: [LikeWhereUniqueInput!]
  connect: [LikeWhereUniqueInput!]
  set: [LikeWhereUniqueInput!]
  disconnect: [LikeWhereUniqueInput!]
  update: [LikeUpdateWithWhereUniqueWithoutPostInput!]
  upsert: [LikeUpsertWithWhereUniqueWithoutPostInput!]
  deleteMany: [LikeScalarWhereInput!]
}

input LikeUpdateManyWithoutUserInput {
  create: [LikeCreateWithoutUserInput!]
  delete: [LikeWhereUniqueInput!]
  connect: [LikeWhereUniqueInput!]
  set: [LikeWhereUniqueInput!]
  disconnect: [LikeWhereUniqueInput!]
  update: [LikeUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [LikeUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [LikeScalarWhereInput!]
}

input LikeUpdateWithoutPostDataInput {
  user: UserUpdateOneWithoutLikesInput
}

input LikeUpdateWithoutUserDataInput {
  post: PostUpdateOneWithoutLikesInput
}

input LikeUpdateWithWhereUniqueWithoutPostInput {
  where: LikeWhereUniqueInput!
  data: LikeUpdateWithoutPostDataInput!
}

input LikeUpdateWithWhereUniqueWithoutUserInput {
  where: LikeWhereUniqueInput!
  data: LikeUpdateWithoutUserDataInput!
}

input LikeUpsertWithWhereUniqueWithoutPostInput {
  where: LikeWhereUniqueInput!
  update: LikeUpdateWithoutPostDataInput!
  create: LikeCreateWithoutPostInput!
}

input LikeUpsertWithWhereUniqueWithoutUserInput {
  where: LikeWhereUniqueInput!
  update: LikeUpdateWithoutUserDataInput!
  create: LikeCreateWithoutUserInput!
}

input LikeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  post: PostWhereInput
  AND: [LikeWhereInput!]
  OR: [LikeWhereInput!]
  NOT: [LikeWhereInput!]
}

input LikeWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createComment(data: CommentCreateInput!): Comment!
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  createContent(data: ContentCreateInput!): Content!
  updateContent(data: ContentUpdateInput!, where: ContentWhereUniqueInput!): Content
  updateManyContents(data: ContentUpdateManyMutationInput!, where: ContentWhereInput): BatchPayload!
  upsertContent(where: ContentWhereUniqueInput!, create: ContentCreateInput!, update: ContentUpdateInput!): Content!
  deleteContent(where: ContentWhereUniqueInput!): Content
  deleteManyContents(where: ContentWhereInput): BatchPayload!
  createInterest(data: InterestCreateInput!): Interest!
  updateInterest(data: InterestUpdateInput!, where: InterestWhereUniqueInput!): Interest
  updateManyInterests(data: InterestUpdateManyMutationInput!, where: InterestWhereInput): BatchPayload!
  upsertInterest(where: InterestWhereUniqueInput!, create: InterestCreateInput!, update: InterestUpdateInput!): Interest!
  deleteInterest(where: InterestWhereUniqueInput!): Interest
  deleteManyInterests(where: InterestWhereInput): BatchPayload!
  createLike(data: LikeCreateInput!): Like!
  updateLike(data: LikeUpdateInput!, where: LikeWhereUniqueInput!): Like
  upsertLike(where: LikeWhereUniqueInput!, create: LikeCreateInput!, update: LikeUpdateInput!): Like!
  deleteLike(where: LikeWhereUniqueInput!): Like
  deleteManyLikes(where: LikeWhereInput): BatchPayload!
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post {
  id: ID!
  title: String!
  content: String!
  markerLink: String!
  imageLink: String!
  latitude: String!
  longitude: String!
  tags: String!
  hiddenTags: String!
  numOfViews: Int!
  isLiked: Boolean!
  user: User
  contents(where: ContentWhereInput, orderBy: ContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Content!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  likes(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Like!]
  date: DateTime
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  id: ID
  title: String!
  content: String!
  markerLink: String!
  imageLink: String!
  latitude: String!
  longitude: String!
  tags: String!
  hiddenTags: String!
  numOfViews: Int
  isLiked: Boolean
  user: UserCreateOneWithoutPostsInput
  contents: ContentCreateManyWithoutPostInput
  comments: CommentCreateManyWithoutPostInput
  likes: LikeCreateManyWithoutPostInput
}

input PostCreateManyWithoutUserInput {
  create: [PostCreateWithoutUserInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateOneWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  connect: PostWhereUniqueInput
}

input PostCreateOneWithoutContentsInput {
  create: PostCreateWithoutContentsInput
  connect: PostWhereUniqueInput
}

input PostCreateOneWithoutLikesInput {
  create: PostCreateWithoutLikesInput
  connect: PostWhereUniqueInput
}

input PostCreateWithoutCommentsInput {
  id: ID
  title: String!
  content: String!
  markerLink: String!
  imageLink: String!
  latitude: String!
  longitude: String!
  tags: String!
  hiddenTags: String!
  numOfViews: Int
  isLiked: Boolean
  user: UserCreateOneWithoutPostsInput
  contents: ContentCreateManyWithoutPostInput
  likes: LikeCreateManyWithoutPostInput
}

input PostCreateWithoutContentsInput {
  id: ID
  title: String!
  content: String!
  markerLink: String!
  imageLink: String!
  latitude: String!
  longitude: String!
  tags: String!
  hiddenTags: String!
  numOfViews: Int
  isLiked: Boolean
  user: UserCreateOneWithoutPostsInput
  comments: CommentCreateManyWithoutPostInput
  likes: LikeCreateManyWithoutPostInput
}

input PostCreateWithoutLikesInput {
  id: ID
  title: String!
  content: String!
  markerLink: String!
  imageLink: String!
  latitude: String!
  longitude: String!
  tags: String!
  hiddenTags: String!
  numOfViews: Int
  isLiked: Boolean
  user: UserCreateOneWithoutPostsInput
  contents: ContentCreateManyWithoutPostInput
  comments: CommentCreateManyWithoutPostInput
}

input PostCreateWithoutUserInput {
  id: ID
  title: String!
  content: String!
  markerLink: String!
  imageLink: String!
  latitude: String!
  longitude: String!
  tags: String!
  hiddenTags: String!
  numOfViews: Int
  isLiked: Boolean
  contents: ContentCreateManyWithoutPostInput
  comments: CommentCreateManyWithoutPostInput
  likes: LikeCreateManyWithoutPostInput
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  content_ASC
  content_DESC
  markerLink_ASC
  markerLink_DESC
  imageLink_ASC
  imageLink_DESC
  latitude_ASC
  latitude_DESC
  longitude_ASC
  longitude_DESC
  tags_ASC
  tags_DESC
  hiddenTags_ASC
  hiddenTags_DESC
  numOfViews_ASC
  numOfViews_DESC
  isLiked_ASC
  isLiked_DESC
  date_ASC
  date_DESC
}

type PostPreviousValues {
  id: ID!
  title: String!
  content: String!
  markerLink: String!
  imageLink: String!
  latitude: String!
  longitude: String!
  tags: String!
  hiddenTags: String!
  numOfViews: Int!
  isLiked: Boolean!
  date: DateTime
}

input PostScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  markerLink: String
  markerLink_not: String
  markerLink_in: [String!]
  markerLink_not_in: [String!]
  markerLink_lt: String
  markerLink_lte: String
  markerLink_gt: String
  markerLink_gte: String
  markerLink_contains: String
  markerLink_not_contains: String
  markerLink_starts_with: String
  markerLink_not_starts_with: String
  markerLink_ends_with: String
  markerLink_not_ends_with: String
  imageLink: String
  imageLink_not: String
  imageLink_in: [String!]
  imageLink_not_in: [String!]
  imageLink_lt: String
  imageLink_lte: String
  imageLink_gt: String
  imageLink_gte: String
  imageLink_contains: String
  imageLink_not_contains: String
  imageLink_starts_with: String
  imageLink_not_starts_with: String
  imageLink_ends_with: String
  imageLink_not_ends_with: String
  latitude: String
  latitude_not: String
  latitude_in: [String!]
  latitude_not_in: [String!]
  latitude_lt: String
  latitude_lte: String
  latitude_gt: String
  latitude_gte: String
  latitude_contains: String
  latitude_not_contains: String
  latitude_starts_with: String
  latitude_not_starts_with: String
  latitude_ends_with: String
  latitude_not_ends_with: String
  longitude: String
  longitude_not: String
  longitude_in: [String!]
  longitude_not_in: [String!]
  longitude_lt: String
  longitude_lte: String
  longitude_gt: String
  longitude_gte: String
  longitude_contains: String
  longitude_not_contains: String
  longitude_starts_with: String
  longitude_not_starts_with: String
  longitude_ends_with: String
  longitude_not_ends_with: String
  tags: String
  tags_not: String
  tags_in: [String!]
  tags_not_in: [String!]
  tags_lt: String
  tags_lte: String
  tags_gt: String
  tags_gte: String
  tags_contains: String
  tags_not_contains: String
  tags_starts_with: String
  tags_not_starts_with: String
  tags_ends_with: String
  tags_not_ends_with: String
  hiddenTags: String
  hiddenTags_not: String
  hiddenTags_in: [String!]
  hiddenTags_not_in: [String!]
  hiddenTags_lt: String
  hiddenTags_lte: String
  hiddenTags_gt: String
  hiddenTags_gte: String
  hiddenTags_contains: String
  hiddenTags_not_contains: String
  hiddenTags_starts_with: String
  hiddenTags_not_starts_with: String
  hiddenTags_ends_with: String
  hiddenTags_not_ends_with: String
  numOfViews: Int
  numOfViews_not: Int
  numOfViews_in: [Int!]
  numOfViews_not_in: [Int!]
  numOfViews_lt: Int
  numOfViews_lte: Int
  numOfViews_gt: Int
  numOfViews_gte: Int
  isLiked: Boolean
  isLiked_not: Boolean
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  NOT: [PostSubscriptionWhereInput!]
}

input PostUpdateInput {
  title: String
  content: String
  markerLink: String
  imageLink: String
  latitude: String
  longitude: String
  tags: String
  hiddenTags: String
  numOfViews: Int
  isLiked: Boolean
  user: UserUpdateOneWithoutPostsInput
  contents: ContentUpdateManyWithoutPostInput
  comments: CommentUpdateManyWithoutPostInput
  likes: LikeUpdateManyWithoutPostInput
}

input PostUpdateManyDataInput {
  title: String
  content: String
  markerLink: String
  imageLink: String
  latitude: String
  longitude: String
  tags: String
  hiddenTags: String
  numOfViews: Int
  isLiked: Boolean
}

input PostUpdateManyMutationInput {
  title: String
  content: String
  markerLink: String
  imageLink: String
  latitude: String
  longitude: String
  tags: String
  hiddenTags: String
  numOfViews: Int
  isLiked: Boolean
}

input PostUpdateManyWithoutUserInput {
  create: [PostCreateWithoutUserInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateOneWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  update: PostUpdateWithoutCommentsDataInput
  upsert: PostUpsertWithoutCommentsInput
  delete: Boolean
  disconnect: Boolean
  connect: PostWhereUniqueInput
}

input PostUpdateOneWithoutContentsInput {
  create: PostCreateWithoutContentsInput
  update: PostUpdateWithoutContentsDataInput
  upsert: PostUpsertWithoutContentsInput
  delete: Boolean
  disconnect: Boolean
  connect: PostWhereUniqueInput
}

input PostUpdateOneWithoutLikesInput {
  create: PostCreateWithoutLikesInput
  update: PostUpdateWithoutLikesDataInput
  upsert: PostUpsertWithoutLikesInput
  delete: Boolean
  disconnect: Boolean
  connect: PostWhereUniqueInput
}

input PostUpdateWithoutCommentsDataInput {
  title: String
  content: String
  markerLink: String
  imageLink: String
  latitude: String
  longitude: String
  tags: String
  hiddenTags: String
  numOfViews: Int
  isLiked: Boolean
  user: UserUpdateOneWithoutPostsInput
  contents: ContentUpdateManyWithoutPostInput
  likes: LikeUpdateManyWithoutPostInput
}

input PostUpdateWithoutContentsDataInput {
  title: String
  content: String
  markerLink: String
  imageLink: String
  latitude: String
  longitude: String
  tags: String
  hiddenTags: String
  numOfViews: Int
  isLiked: Boolean
  user: UserUpdateOneWithoutPostsInput
  comments: CommentUpdateManyWithoutPostInput
  likes: LikeUpdateManyWithoutPostInput
}

input PostUpdateWithoutLikesDataInput {
  title: String
  content: String
  markerLink: String
  imageLink: String
  latitude: String
  longitude: String
  tags: String
  hiddenTags: String
  numOfViews: Int
  isLiked: Boolean
  user: UserUpdateOneWithoutPostsInput
  contents: ContentUpdateManyWithoutPostInput
  comments: CommentUpdateManyWithoutPostInput
}

input PostUpdateWithoutUserDataInput {
  title: String
  content: String
  markerLink: String
  imageLink: String
  latitude: String
  longitude: String
  tags: String
  hiddenTags: String
  numOfViews: Int
  isLiked: Boolean
  contents: ContentUpdateManyWithoutPostInput
  comments: CommentUpdateManyWithoutPostInput
  likes: LikeUpdateManyWithoutPostInput
}

input PostUpdateWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutUserDataInput!
}

input PostUpsertWithoutCommentsInput {
  update: PostUpdateWithoutCommentsDataInput!
  create: PostCreateWithoutCommentsInput!
}

input PostUpsertWithoutContentsInput {
  update: PostUpdateWithoutContentsDataInput!
  create: PostCreateWithoutContentsInput!
}

input PostUpsertWithoutLikesInput {
  update: PostUpdateWithoutLikesDataInput!
  create: PostCreateWithoutLikesInput!
}

input PostUpsertWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutUserDataInput!
  create: PostCreateWithoutUserInput!
}

input PostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  markerLink: String
  markerLink_not: String
  markerLink_in: [String!]
  markerLink_not_in: [String!]
  markerLink_lt: String
  markerLink_lte: String
  markerLink_gt: String
  markerLink_gte: String
  markerLink_contains: String
  markerLink_not_contains: String
  markerLink_starts_with: String
  markerLink_not_starts_with: String
  markerLink_ends_with: String
  markerLink_not_ends_with: String
  imageLink: String
  imageLink_not: String
  imageLink_in: [String!]
  imageLink_not_in: [String!]
  imageLink_lt: String
  imageLink_lte: String
  imageLink_gt: String
  imageLink_gte: String
  imageLink_contains: String
  imageLink_not_contains: String
  imageLink_starts_with: String
  imageLink_not_starts_with: String
  imageLink_ends_with: String
  imageLink_not_ends_with: String
  latitude: String
  latitude_not: String
  latitude_in: [String!]
  latitude_not_in: [String!]
  latitude_lt: String
  latitude_lte: String
  latitude_gt: String
  latitude_gte: String
  latitude_contains: String
  latitude_not_contains: String
  latitude_starts_with: String
  latitude_not_starts_with: String
  latitude_ends_with: String
  latitude_not_ends_with: String
  longitude: String
  longitude_not: String
  longitude_in: [String!]
  longitude_not_in: [String!]
  longitude_lt: String
  longitude_lte: String
  longitude_gt: String
  longitude_gte: String
  longitude_contains: String
  longitude_not_contains: String
  longitude_starts_with: String
  longitude_not_starts_with: String
  longitude_ends_with: String
  longitude_not_ends_with: String
  tags: String
  tags_not: String
  tags_in: [String!]
  tags_not_in: [String!]
  tags_lt: String
  tags_lte: String
  tags_gt: String
  tags_gte: String
  tags_contains: String
  tags_not_contains: String
  tags_starts_with: String
  tags_not_starts_with: String
  tags_ends_with: String
  tags_not_ends_with: String
  hiddenTags: String
  hiddenTags_not: String
  hiddenTags_in: [String!]
  hiddenTags_not_in: [String!]
  hiddenTags_lt: String
  hiddenTags_lte: String
  hiddenTags_gt: String
  hiddenTags_gte: String
  hiddenTags_contains: String
  hiddenTags_not_contains: String
  hiddenTags_starts_with: String
  hiddenTags_not_starts_with: String
  hiddenTags_ends_with: String
  hiddenTags_not_ends_with: String
  numOfViews: Int
  numOfViews_not: Int
  numOfViews_in: [Int!]
  numOfViews_not_in: [Int!]
  numOfViews_lt: Int
  numOfViews_lte: Int
  numOfViews_gt: Int
  numOfViews_gte: Int
  isLiked: Boolean
  isLiked_not: Boolean
  user: UserWhereInput
  contents_every: ContentWhereInput
  contents_some: ContentWhereInput
  contents_none: ContentWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  likes_every: LikeWhereInput
  likes_some: LikeWhereInput
  likes_none: LikeWhereInput
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  comment(where: CommentWhereUniqueInput!): Comment
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  content(where: ContentWhereUniqueInput!): Content
  contents(where: ContentWhereInput, orderBy: ContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Content]!
  contentsConnection(where: ContentWhereInput, orderBy: ContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContentConnection!
  interest(where: InterestWhereUniqueInput!): Interest
  interests(where: InterestWhereInput, orderBy: InterestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Interest]!
  interestsConnection(where: InterestWhereInput, orderBy: InterestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InterestConnection!
  like(where: LikeWhereUniqueInput!): Like
  likes(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Like]!
  likesConnection(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LikeConnection!
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  content(where: ContentSubscriptionWhereInput): ContentSubscriptionPayload
  interest(where: InterestSubscriptionWhereInput): InterestSubscriptionPayload
  like(where: LikeSubscriptionWhereInput): LikeSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  nickName: String!
  email: String!
  password: String!
  profileLink: String!
  admin: Boolean!
  isFollowing: Boolean!
  isMe: Boolean!
  followers(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  following(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  likes(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Like!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  interests(where: InterestWhereInput, orderBy: InterestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Interest!]
  loginSecret: String
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  nickName: String!
  email: String!
  password: String!
  profileLink: String!
  admin: Boolean
  isFollowing: Boolean
  isMe: Boolean
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  posts: PostCreateManyWithoutUserInput
  likes: LikeCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  interests: InterestCreateManyWithoutUserInput
  loginSecret: String
}

input UserCreateManyWithoutFollowersInput {
  create: [UserCreateWithoutFollowersInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutFollowingInput {
  create: [UserCreateWithoutFollowingInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutInterestsInput {
  create: UserCreateWithoutInterestsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutLikesInput {
  create: UserCreateWithoutLikesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCommentsInput {
  id: ID
  nickName: String!
  email: String!
  password: String!
  profileLink: String!
  admin: Boolean
  isFollowing: Boolean
  isMe: Boolean
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  posts: PostCreateManyWithoutUserInput
  likes: LikeCreateManyWithoutUserInput
  interests: InterestCreateManyWithoutUserInput
  loginSecret: String
}

input UserCreateWithoutFollowersInput {
  id: ID
  nickName: String!
  email: String!
  password: String!
  profileLink: String!
  admin: Boolean
  isFollowing: Boolean
  isMe: Boolean
  following: UserCreateManyWithoutFollowersInput
  posts: PostCreateManyWithoutUserInput
  likes: LikeCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  interests: InterestCreateManyWithoutUserInput
  loginSecret: String
}

input UserCreateWithoutFollowingInput {
  id: ID
  nickName: String!
  email: String!
  password: String!
  profileLink: String!
  admin: Boolean
  isFollowing: Boolean
  isMe: Boolean
  followers: UserCreateManyWithoutFollowingInput
  posts: PostCreateManyWithoutUserInput
  likes: LikeCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  interests: InterestCreateManyWithoutUserInput
  loginSecret: String
}

input UserCreateWithoutInterestsInput {
  id: ID
  nickName: String!
  email: String!
  password: String!
  profileLink: String!
  admin: Boolean
  isFollowing: Boolean
  isMe: Boolean
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  posts: PostCreateManyWithoutUserInput
  likes: LikeCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  loginSecret: String
}

input UserCreateWithoutLikesInput {
  id: ID
  nickName: String!
  email: String!
  password: String!
  profileLink: String!
  admin: Boolean
  isFollowing: Boolean
  isMe: Boolean
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  posts: PostCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  interests: InterestCreateManyWithoutUserInput
  loginSecret: String
}

input UserCreateWithoutPostsInput {
  id: ID
  nickName: String!
  email: String!
  password: String!
  profileLink: String!
  admin: Boolean
  isFollowing: Boolean
  isMe: Boolean
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  likes: LikeCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  interests: InterestCreateManyWithoutUserInput
  loginSecret: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  nickName_ASC
  nickName_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  profileLink_ASC
  profileLink_DESC
  admin_ASC
  admin_DESC
  isFollowing_ASC
  isFollowing_DESC
  isMe_ASC
  isMe_DESC
  loginSecret_ASC
  loginSecret_DESC
}

type UserPreviousValues {
  id: ID!
  nickName: String!
  email: String!
  password: String!
  profileLink: String!
  admin: Boolean!
  isFollowing: Boolean!
  isMe: Boolean!
  loginSecret: String
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  nickName: String
  nickName_not: String
  nickName_in: [String!]
  nickName_not_in: [String!]
  nickName_lt: String
  nickName_lte: String
  nickName_gt: String
  nickName_gte: String
  nickName_contains: String
  nickName_not_contains: String
  nickName_starts_with: String
  nickName_not_starts_with: String
  nickName_ends_with: String
  nickName_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  profileLink: String
  profileLink_not: String
  profileLink_in: [String!]
  profileLink_not_in: [String!]
  profileLink_lt: String
  profileLink_lte: String
  profileLink_gt: String
  profileLink_gte: String
  profileLink_contains: String
  profileLink_not_contains: String
  profileLink_starts_with: String
  profileLink_not_starts_with: String
  profileLink_ends_with: String
  profileLink_not_ends_with: String
  admin: Boolean
  admin_not: Boolean
  isFollowing: Boolean
  isFollowing_not: Boolean
  isMe: Boolean
  isMe_not: Boolean
  loginSecret: String
  loginSecret_not: String
  loginSecret_in: [String!]
  loginSecret_not_in: [String!]
  loginSecret_lt: String
  loginSecret_lte: String
  loginSecret_gt: String
  loginSecret_gte: String
  loginSecret_contains: String
  loginSecret_not_contains: String
  loginSecret_starts_with: String
  loginSecret_not_starts_with: String
  loginSecret_ends_with: String
  loginSecret_not_ends_with: String
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  nickName: String
  email: String
  password: String
  profileLink: String
  admin: Boolean
  isFollowing: Boolean
  isMe: Boolean
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  posts: PostUpdateManyWithoutUserInput
  likes: LikeUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  interests: InterestUpdateManyWithoutUserInput
  loginSecret: String
}

input UserUpdateManyDataInput {
  nickName: String
  email: String
  password: String
  profileLink: String
  admin: Boolean
  isFollowing: Boolean
  isMe: Boolean
  loginSecret: String
}

input UserUpdateManyMutationInput {
  nickName: String
  email: String
  password: String
  profileLink: String
  admin: Boolean
  isFollowing: Boolean
  isMe: Boolean
  loginSecret: String
}

input UserUpdateManyWithoutFollowersInput {
  create: [UserCreateWithoutFollowersInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowersInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowersInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutFollowingInput {
  create: [UserCreateWithoutFollowingInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowingInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowingInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  update: UserUpdateWithoutCommentsDataInput
  upsert: UserUpsertWithoutCommentsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutInterestsInput {
  create: UserCreateWithoutInterestsInput
  update: UserUpdateWithoutInterestsDataInput
  upsert: UserUpsertWithoutInterestsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutLikesInput {
  create: UserCreateWithoutLikesInput
  update: UserUpdateWithoutLikesDataInput
  upsert: UserUpsertWithoutLikesInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutCommentsDataInput {
  nickName: String
  email: String
  password: String
  profileLink: String
  admin: Boolean
  isFollowing: Boolean
  isMe: Boolean
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  posts: PostUpdateManyWithoutUserInput
  likes: LikeUpdateManyWithoutUserInput
  interests: InterestUpdateManyWithoutUserInput
  loginSecret: String
}

input UserUpdateWithoutFollowersDataInput {
  nickName: String
  email: String
  password: String
  profileLink: String
  admin: Boolean
  isFollowing: Boolean
  isMe: Boolean
  following: UserUpdateManyWithoutFollowersInput
  posts: PostUpdateManyWithoutUserInput
  likes: LikeUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  interests: InterestUpdateManyWithoutUserInput
  loginSecret: String
}

input UserUpdateWithoutFollowingDataInput {
  nickName: String
  email: String
  password: String
  profileLink: String
  admin: Boolean
  isFollowing: Boolean
  isMe: Boolean
  followers: UserUpdateManyWithoutFollowingInput
  posts: PostUpdateManyWithoutUserInput
  likes: LikeUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  interests: InterestUpdateManyWithoutUserInput
  loginSecret: String
}

input UserUpdateWithoutInterestsDataInput {
  nickName: String
  email: String
  password: String
  profileLink: String
  admin: Boolean
  isFollowing: Boolean
  isMe: Boolean
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  posts: PostUpdateManyWithoutUserInput
  likes: LikeUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  loginSecret: String
}

input UserUpdateWithoutLikesDataInput {
  nickName: String
  email: String
  password: String
  profileLink: String
  admin: Boolean
  isFollowing: Boolean
  isMe: Boolean
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  posts: PostUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  interests: InterestUpdateManyWithoutUserInput
  loginSecret: String
}

input UserUpdateWithoutPostsDataInput {
  nickName: String
  email: String
  password: String
  profileLink: String
  admin: Boolean
  isFollowing: Boolean
  isMe: Boolean
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  likes: LikeUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  interests: InterestUpdateManyWithoutUserInput
  loginSecret: String
}

input UserUpdateWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutFollowersDataInput!
}

input UserUpdateWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutFollowingDataInput!
}

input UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput!
  create: UserCreateWithoutCommentsInput!
}

input UserUpsertWithoutInterestsInput {
  update: UserUpdateWithoutInterestsDataInput!
  create: UserCreateWithoutInterestsInput!
}

input UserUpsertWithoutLikesInput {
  update: UserUpdateWithoutLikesDataInput!
  create: UserCreateWithoutLikesInput!
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserUpsertWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutFollowersDataInput!
  create: UserCreateWithoutFollowersInput!
}

input UserUpsertWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutFollowingDataInput!
  create: UserCreateWithoutFollowingInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  nickName: String
  nickName_not: String
  nickName_in: [String!]
  nickName_not_in: [String!]
  nickName_lt: String
  nickName_lte: String
  nickName_gt: String
  nickName_gte: String
  nickName_contains: String
  nickName_not_contains: String
  nickName_starts_with: String
  nickName_not_starts_with: String
  nickName_ends_with: String
  nickName_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  profileLink: String
  profileLink_not: String
  profileLink_in: [String!]
  profileLink_not_in: [String!]
  profileLink_lt: String
  profileLink_lte: String
  profileLink_gt: String
  profileLink_gte: String
  profileLink_contains: String
  profileLink_not_contains: String
  profileLink_starts_with: String
  profileLink_not_starts_with: String
  profileLink_ends_with: String
  profileLink_not_ends_with: String
  admin: Boolean
  admin_not: Boolean
  isFollowing: Boolean
  isFollowing_not: Boolean
  isMe: Boolean
  isMe_not: Boolean
  followers_every: UserWhereInput
  followers_some: UserWhereInput
  followers_none: UserWhereInput
  following_every: UserWhereInput
  following_some: UserWhereInput
  following_none: UserWhereInput
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  likes_every: LikeWhereInput
  likes_some: LikeWhereInput
  likes_none: LikeWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  interests_every: InterestWhereInput
  interests_some: InterestWhereInput
  interests_none: InterestWhereInput
  loginSecret: String
  loginSecret_not: String
  loginSecret_in: [String!]
  loginSecret_not_in: [String!]
  loginSecret_lt: String
  loginSecret_lte: String
  loginSecret_gt: String
  loginSecret_gte: String
  loginSecret_contains: String
  loginSecret_not_contains: String
  loginSecret_starts_with: String
  loginSecret_not_starts_with: String
  loginSecret_ends_with: String
  loginSecret_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  nickName: String
  email: String
}
`
      }
    