// Code generated by Prisma (prisma@1.34.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  comment: (where?: CommentWhereInput) => Promise<boolean>;
  content: (where?: ContentWhereInput) => Promise<boolean>;
  interest: (where?: InterestWhereInput) => Promise<boolean>;
  like: (where?: LikeWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  comment: (where: CommentWhereUniqueInput) => CommentNullablePromise;
  comments: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Comment>;
  commentsConnection: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CommentConnectionPromise;
  content: (where: ContentWhereUniqueInput) => ContentNullablePromise;
  contents: (args?: {
    where?: ContentWhereInput;
    orderBy?: ContentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Content>;
  contentsConnection: (args?: {
    where?: ContentWhereInput;
    orderBy?: ContentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ContentConnectionPromise;
  interest: (where: InterestWhereUniqueInput) => InterestNullablePromise;
  interests: (args?: {
    where?: InterestWhereInput;
    orderBy?: InterestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Interest>;
  interestsConnection: (args?: {
    where?: InterestWhereInput;
    orderBy?: InterestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => InterestConnectionPromise;
  like: (where: LikeWhereUniqueInput) => LikeNullablePromise;
  likes: (args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Like>;
  likesConnection: (args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LikeConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostNullablePromise;
  posts: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Post>;
  postsConnection: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PostConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createComment: (data: CommentCreateInput) => CommentPromise;
  updateComment: (args: {
    data: CommentUpdateInput;
    where: CommentWhereUniqueInput;
  }) => CommentPromise;
  updateManyComments: (args: {
    data: CommentUpdateManyMutationInput;
    where?: CommentWhereInput;
  }) => BatchPayloadPromise;
  upsertComment: (args: {
    where: CommentWhereUniqueInput;
    create: CommentCreateInput;
    update: CommentUpdateInput;
  }) => CommentPromise;
  deleteComment: (where: CommentWhereUniqueInput) => CommentPromise;
  deleteManyComments: (where?: CommentWhereInput) => BatchPayloadPromise;
  createContent: (data: ContentCreateInput) => ContentPromise;
  updateContent: (args: {
    data: ContentUpdateInput;
    where: ContentWhereUniqueInput;
  }) => ContentPromise;
  updateManyContents: (args: {
    data: ContentUpdateManyMutationInput;
    where?: ContentWhereInput;
  }) => BatchPayloadPromise;
  upsertContent: (args: {
    where: ContentWhereUniqueInput;
    create: ContentCreateInput;
    update: ContentUpdateInput;
  }) => ContentPromise;
  deleteContent: (where: ContentWhereUniqueInput) => ContentPromise;
  deleteManyContents: (where?: ContentWhereInput) => BatchPayloadPromise;
  createInterest: (data: InterestCreateInput) => InterestPromise;
  updateInterest: (args: {
    data: InterestUpdateInput;
    where: InterestWhereUniqueInput;
  }) => InterestPromise;
  updateManyInterests: (args: {
    data: InterestUpdateManyMutationInput;
    where?: InterestWhereInput;
  }) => BatchPayloadPromise;
  upsertInterest: (args: {
    where: InterestWhereUniqueInput;
    create: InterestCreateInput;
    update: InterestUpdateInput;
  }) => InterestPromise;
  deleteInterest: (where: InterestWhereUniqueInput) => InterestPromise;
  deleteManyInterests: (where?: InterestWhereInput) => BatchPayloadPromise;
  createLike: (data: LikeCreateInput) => LikePromise;
  updateLike: (args: {
    data: LikeUpdateInput;
    where: LikeWhereUniqueInput;
  }) => LikePromise;
  upsertLike: (args: {
    where: LikeWhereUniqueInput;
    create: LikeCreateInput;
    update: LikeUpdateInput;
  }) => LikePromise;
  deleteLike: (where: LikeWhereUniqueInput) => LikePromise;
  deleteManyLikes: (where?: LikeWhereInput) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (args: {
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
  }) => PostPromise;
  updateManyPosts: (args: {
    data: PostUpdateManyMutationInput;
    where?: PostWhereInput;
  }) => BatchPayloadPromise;
  upsertPost: (args: {
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
  }) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  comment: (
    where?: CommentSubscriptionWhereInput
  ) => CommentSubscriptionPayloadSubscription;
  content: (
    where?: ContentSubscriptionWhereInput
  ) => ContentSubscriptionPayloadSubscription;
  interest: (
    where?: InterestSubscriptionWhereInput
  ) => InterestSubscriptionPayloadSubscription;
  like: (
    where?: LikeSubscriptionWhereInput
  ) => LikeSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "nickName_ASC"
  | "nickName_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "profileLink_ASC"
  | "profileLink_DESC"
  | "admin_ASC"
  | "admin_DESC"
  | "isFollowing_ASC"
  | "isFollowing_DESC"
  | "isMe_ASC"
  | "isMe_DESC"
  | "loginSecret_ASC"
  | "loginSecret_DESC";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "content_ASC"
  | "content_DESC"
  | "markerLink_ASC"
  | "markerLink_DESC"
  | "imageLink_ASC"
  | "imageLink_DESC"
  | "latitude_ASC"
  | "latitude_DESC"
  | "longitude_ASC"
  | "longitude_DESC"
  | "tags_ASC"
  | "tags_DESC"
  | "hiddenTags_ASC"
  | "hiddenTags_DESC"
  | "numOfViews_ASC"
  | "numOfViews_DESC"
  | "isLiked_ASC"
  | "isLiked_DESC"
  | "date_ASC"
  | "date_DESC";

export type ContentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "link_ASC"
  | "link_DESC"
  | "type_ASC"
  | "type_DESC";

export type CommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "text_ASC"
  | "text_DESC"
  | "date_ASC"
  | "date_DESC";

export type LikeOrderByInput = "id_ASC" | "id_DESC";

export type InterestOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "interesting_ASC"
  | "interesting_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface CommentUpdateWithoutPostDataInput {
  user?: Maybe<UserUpdateOneWithoutCommentsInput>;
  text?: Maybe<String>;
}

export type CommentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CommentUpdateManyDataInput {
  text?: Maybe<String>;
}

export interface ContentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  post?: Maybe<PostWhereInput>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  type?: Maybe<Boolean>;
  type_not?: Maybe<Boolean>;
  AND?: Maybe<ContentWhereInput[] | ContentWhereInput>;
  OR?: Maybe<ContentWhereInput[] | ContentWhereInput>;
  NOT?: Maybe<ContentWhereInput[] | ContentWhereInput>;
}

export interface UserUpdateWithoutCommentsDataInput {
  nickName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  profileLink?: Maybe<String>;
  admin?: Maybe<Boolean>;
  isFollowing?: Maybe<Boolean>;
  isMe?: Maybe<Boolean>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  likes?: Maybe<LikeUpdateManyWithoutUserInput>;
  interests?: Maybe<InterestUpdateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface ContentCreateInput {
  id?: Maybe<ID_Input>;
  post?: Maybe<PostCreateOneWithoutContentsInput>;
  link: String;
  type: Boolean;
}

export interface UserUpdateManyWithoutFollowingInput {
  create?: Maybe<
    UserCreateWithoutFollowingInput[] | UserCreateWithoutFollowingInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutFollowingInput[]
    | UserUpdateWithWhereUniqueWithoutFollowingInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutFollowingInput[]
    | UserUpsertWithWhereUniqueWithoutFollowingInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface LikeUpdateManyWithoutPostInput {
  create?: Maybe<LikeCreateWithoutPostInput[] | LikeCreateWithoutPostInput>;
  delete?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  connect?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  set?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  disconnect?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  update?: Maybe<
    | LikeUpdateWithWhereUniqueWithoutPostInput[]
    | LikeUpdateWithWhereUniqueWithoutPostInput
  >;
  upsert?: Maybe<
    | LikeUpsertWithWhereUniqueWithoutPostInput[]
    | LikeUpsertWithWhereUniqueWithoutPostInput
  >;
  deleteMany?: Maybe<LikeScalarWhereInput[] | LikeScalarWhereInput>;
}

export interface UserUpdateWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutFollowingDataInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface UserUpdateWithoutFollowingDataInput {
  nickName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  profileLink?: Maybe<String>;
  admin?: Maybe<Boolean>;
  isFollowing?: Maybe<Boolean>;
  isMe?: Maybe<Boolean>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  likes?: Maybe<LikeUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  interests?: Maybe<InterestUpdateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PostWhereInput>;
  AND?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  OR?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  NOT?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
}

export interface PostUpdateManyWithoutUserInput {
  create?: Maybe<PostCreateWithoutUserInput[] | PostCreateWithoutUserInput>;
  delete?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  set?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  disconnect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  update?: Maybe<
    | PostUpdateWithWhereUniqueWithoutUserInput[]
    | PostUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | PostUpsertWithWhereUniqueWithoutUserInput[]
    | PostUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  updateMany?: Maybe<
    PostUpdateManyWithWhereNestedInput[] | PostUpdateManyWithWhereNestedInput
  >;
}

export interface LikeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<LikeWhereInput>;
  AND?: Maybe<LikeSubscriptionWhereInput[] | LikeSubscriptionWhereInput>;
  OR?: Maybe<LikeSubscriptionWhereInput[] | LikeSubscriptionWhereInput>;
  NOT?: Maybe<LikeSubscriptionWhereInput[] | LikeSubscriptionWhereInput>;
}

export interface PostUpdateWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutUserDataInput;
}

export interface ContentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ContentWhereInput>;
  AND?: Maybe<ContentSubscriptionWhereInput[] | ContentSubscriptionWhereInput>;
  OR?: Maybe<ContentSubscriptionWhereInput[] | ContentSubscriptionWhereInput>;
  NOT?: Maybe<ContentSubscriptionWhereInput[] | ContentSubscriptionWhereInput>;
}

export interface PostUpdateWithoutUserDataInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
  markerLink?: Maybe<String>;
  imageLink?: Maybe<String>;
  latitude?: Maybe<String>;
  longitude?: Maybe<String>;
  tags?: Maybe<String>;
  hiddenTags?: Maybe<String>;
  numOfViews?: Maybe<Int>;
  isLiked?: Maybe<Boolean>;
  contents?: Maybe<ContentUpdateManyWithoutPostInput>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
  likes?: Maybe<LikeUpdateManyWithoutPostInput>;
}

export interface UserUpdateManyMutationInput {
  nickName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  profileLink?: Maybe<String>;
  admin?: Maybe<Boolean>;
  isFollowing?: Maybe<Boolean>;
  isMe?: Maybe<Boolean>;
  loginSecret?: Maybe<String>;
}

export interface ContentUpdateManyWithoutPostInput {
  create?: Maybe<
    ContentCreateWithoutPostInput[] | ContentCreateWithoutPostInput
  >;
  delete?: Maybe<ContentWhereUniqueInput[] | ContentWhereUniqueInput>;
  connect?: Maybe<ContentWhereUniqueInput[] | ContentWhereUniqueInput>;
  set?: Maybe<ContentWhereUniqueInput[] | ContentWhereUniqueInput>;
  disconnect?: Maybe<ContentWhereUniqueInput[] | ContentWhereUniqueInput>;
  update?: Maybe<
    | ContentUpdateWithWhereUniqueWithoutPostInput[]
    | ContentUpdateWithWhereUniqueWithoutPostInput
  >;
  upsert?: Maybe<
    | ContentUpsertWithWhereUniqueWithoutPostInput[]
    | ContentUpsertWithWhereUniqueWithoutPostInput
  >;
  deleteMany?: Maybe<ContentScalarWhereInput[] | ContentScalarWhereInput>;
  updateMany?: Maybe<
    | ContentUpdateManyWithWhereNestedInput[]
    | ContentUpdateManyWithWhereNestedInput
  >;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  nickName: String;
  email: String;
  password: String;
  profileLink: String;
  admin?: Maybe<Boolean>;
  isFollowing?: Maybe<Boolean>;
  isMe?: Maybe<Boolean>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  likes?: Maybe<LikeCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  interests?: Maybe<InterestCreateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface ContentUpdateWithWhereUniqueWithoutPostInput {
  where: ContentWhereUniqueInput;
  data: ContentUpdateWithoutPostDataInput;
}

export interface PostUpdateInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
  markerLink?: Maybe<String>;
  imageLink?: Maybe<String>;
  latitude?: Maybe<String>;
  longitude?: Maybe<String>;
  tags?: Maybe<String>;
  hiddenTags?: Maybe<String>;
  numOfViews?: Maybe<Int>;
  isLiked?: Maybe<Boolean>;
  user?: Maybe<UserUpdateOneWithoutPostsInput>;
  contents?: Maybe<ContentUpdateManyWithoutPostInput>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
  likes?: Maybe<LikeUpdateManyWithoutPostInput>;
}

export interface ContentUpdateWithoutPostDataInput {
  link?: Maybe<String>;
  type?: Maybe<Boolean>;
}

export type ContentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ContentUpsertWithWhereUniqueWithoutPostInput {
  where: ContentWhereUniqueInput;
  update: ContentUpdateWithoutPostDataInput;
  create: ContentCreateWithoutPostInput;
}

export interface LikeCreateInput {
  id?: Maybe<ID_Input>;
  user?: Maybe<UserCreateOneWithoutLikesInput>;
  post?: Maybe<PostCreateOneWithoutLikesInput>;
}

export interface ContentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  type?: Maybe<Boolean>;
  type_not?: Maybe<Boolean>;
  AND?: Maybe<ContentScalarWhereInput[] | ContentScalarWhereInput>;
  OR?: Maybe<ContentScalarWhereInput[] | ContentScalarWhereInput>;
  NOT?: Maybe<ContentScalarWhereInput[] | ContentScalarWhereInput>;
}

export type InterestWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ContentUpdateManyWithWhereNestedInput {
  where: ContentScalarWhereInput;
  data: ContentUpdateManyDataInput;
}

export interface UserUpdateWithoutInterestsDataInput {
  nickName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  profileLink?: Maybe<String>;
  admin?: Maybe<Boolean>;
  isFollowing?: Maybe<Boolean>;
  isMe?: Maybe<Boolean>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  likes?: Maybe<LikeUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface ContentUpdateManyDataInput {
  link?: Maybe<String>;
  type?: Maybe<Boolean>;
}

export type LikeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CommentUpdateManyWithoutPostInput {
  create?: Maybe<
    CommentCreateWithoutPostInput[] | CommentCreateWithoutPostInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutPostInput[]
    | CommentUpdateWithWhereUniqueWithoutPostInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutPostInput[]
    | CommentUpsertWithWhereUniqueWithoutPostInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface UserCreateWithoutInterestsInput {
  id?: Maybe<ID_Input>;
  nickName: String;
  email: String;
  password: String;
  profileLink: String;
  admin?: Maybe<Boolean>;
  isFollowing?: Maybe<Boolean>;
  isMe?: Maybe<Boolean>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  likes?: Maybe<LikeCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface CommentUpdateWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutPostDataInput;
}

export type PostWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PostCreateWithoutContentsInput {
  id?: Maybe<ID_Input>;
  title: String;
  content: String;
  markerLink: String;
  imageLink: String;
  latitude: String;
  longitude: String;
  tags: String;
  hiddenTags: String;
  numOfViews?: Maybe<Int>;
  isLiked?: Maybe<Boolean>;
  user?: Maybe<UserCreateOneWithoutPostsInput>;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
  likes?: Maybe<LikeCreateManyWithoutPostInput>;
}

export interface ContentUpdateManyMutationInput {
  link?: Maybe<String>;
  type?: Maybe<Boolean>;
}

export interface CommentUpsertWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutPostDataInput;
  create: CommentCreateWithoutPostInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  nickName?: Maybe<String>;
  email?: Maybe<String>;
}>;

export interface CommentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  OR?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  NOT?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
}

export interface PostUpdateOneWithoutContentsInput {
  create?: Maybe<PostCreateWithoutContentsInput>;
  update?: Maybe<PostUpdateWithoutContentsDataInput>;
  upsert?: Maybe<PostUpsertWithoutContentsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput;
  data: CommentUpdateManyDataInput;
}

export interface UserCreateOneWithoutCommentsInput {
  create?: Maybe<UserCreateWithoutCommentsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface CommentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  post?: Maybe<PostWhereInput>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  OR?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  NOT?: Maybe<CommentWhereInput[] | CommentWhereInput>;
}

export interface UserCreateManyWithoutFollowingInput {
  create?: Maybe<
    UserCreateWithoutFollowingInput[] | UserCreateWithoutFollowingInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface LikeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  post?: Maybe<PostWhereInput>;
  AND?: Maybe<LikeWhereInput[] | LikeWhereInput>;
  OR?: Maybe<LikeWhereInput[] | LikeWhereInput>;
  NOT?: Maybe<LikeWhereInput[] | LikeWhereInput>;
}

export interface PostCreateManyWithoutUserInput {
  create?: Maybe<PostCreateWithoutUserInput[] | PostCreateWithoutUserInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
}

export interface LikeUpdateWithWhereUniqueWithoutPostInput {
  where: LikeWhereUniqueInput;
  data: LikeUpdateWithoutPostDataInput;
}

export interface ContentCreateManyWithoutPostInput {
  create?: Maybe<
    ContentCreateWithoutPostInput[] | ContentCreateWithoutPostInput
  >;
  connect?: Maybe<ContentWhereUniqueInput[] | ContentWhereUniqueInput>;
}

export interface LikeUpdateWithoutPostDataInput {
  user?: Maybe<UserUpdateOneWithoutLikesInput>;
}

export interface CommentCreateManyWithoutPostInput {
  create?: Maybe<
    CommentCreateWithoutPostInput[] | CommentCreateWithoutPostInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface UserUpdateOneWithoutLikesInput {
  create?: Maybe<UserCreateWithoutLikesInput>;
  update?: Maybe<UserUpdateWithoutLikesDataInput>;
  upsert?: Maybe<UserUpsertWithoutLikesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface LikeCreateManyWithoutPostInput {
  create?: Maybe<LikeCreateWithoutPostInput[] | LikeCreateWithoutPostInput>;
  connect?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
}

export interface UserUpdateWithoutLikesDataInput {
  nickName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  profileLink?: Maybe<String>;
  admin?: Maybe<Boolean>;
  isFollowing?: Maybe<Boolean>;
  isMe?: Maybe<Boolean>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  interests?: Maybe<InterestUpdateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface UserCreateOneWithoutLikesInput {
  create?: Maybe<UserCreateWithoutLikesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateManyWithoutFollowersInput {
  create?: Maybe<
    UserCreateWithoutFollowersInput[] | UserCreateWithoutFollowersInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutFollowersInput[]
    | UserUpdateWithWhereUniqueWithoutFollowersInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutFollowersInput[]
    | UserUpsertWithWhereUniqueWithoutFollowersInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserCreateManyWithoutFollowersInput {
  create?: Maybe<
    UserCreateWithoutFollowersInput[] | UserCreateWithoutFollowersInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserUpdateWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutFollowersDataInput;
}

export interface LikeCreateManyWithoutUserInput {
  create?: Maybe<LikeCreateWithoutUserInput[] | LikeCreateWithoutUserInput>;
  connect?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
}

export interface UserUpdateWithoutFollowersDataInput {
  nickName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  profileLink?: Maybe<String>;
  admin?: Maybe<Boolean>;
  isFollowing?: Maybe<Boolean>;
  isMe?: Maybe<Boolean>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  likes?: Maybe<LikeUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  interests?: Maybe<InterestUpdateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface PostCreateOneWithoutLikesInput {
  create?: Maybe<PostCreateWithoutLikesInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface LikeUpdateManyWithoutUserInput {
  create?: Maybe<LikeCreateWithoutUserInput[] | LikeCreateWithoutUserInput>;
  delete?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  connect?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  set?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  disconnect?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  update?: Maybe<
    | LikeUpdateWithWhereUniqueWithoutUserInput[]
    | LikeUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | LikeUpsertWithWhereUniqueWithoutUserInput[]
    | LikeUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<LikeScalarWhereInput[] | LikeScalarWhereInput>;
}

export interface UserCreateOneWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface LikeUpdateWithWhereUniqueWithoutUserInput {
  where: LikeWhereUniqueInput;
  data: LikeUpdateWithoutUserDataInput;
}

export interface CommentCreateManyWithoutUserInput {
  create?: Maybe<
    CommentCreateWithoutUserInput[] | CommentCreateWithoutUserInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface LikeUpdateWithoutUserDataInput {
  post?: Maybe<PostUpdateOneWithoutLikesInput>;
}

export interface PostCreateOneWithoutCommentsInput {
  create?: Maybe<PostCreateWithoutCommentsInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface PostUpdateOneWithoutLikesInput {
  create?: Maybe<PostCreateWithoutLikesInput>;
  update?: Maybe<PostUpdateWithoutLikesDataInput>;
  upsert?: Maybe<PostUpsertWithoutLikesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface InterestCreateManyWithoutUserInput {
  create?: Maybe<
    InterestCreateWithoutUserInput[] | InterestCreateWithoutUserInput
  >;
  connect?: Maybe<InterestWhereUniqueInput[] | InterestWhereUniqueInput>;
}

export interface PostUpdateWithoutLikesDataInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
  markerLink?: Maybe<String>;
  imageLink?: Maybe<String>;
  latitude?: Maybe<String>;
  longitude?: Maybe<String>;
  tags?: Maybe<String>;
  hiddenTags?: Maybe<String>;
  numOfViews?: Maybe<Int>;
  isLiked?: Maybe<Boolean>;
  user?: Maybe<UserUpdateOneWithoutPostsInput>;
  contents?: Maybe<ContentUpdateManyWithoutPostInput>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
}

export interface CommentUpdateInput {
  user?: Maybe<UserUpdateOneWithoutCommentsInput>;
  post?: Maybe<PostUpdateOneWithoutCommentsInput>;
  text?: Maybe<String>;
}

export interface UserUpdateOneWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  update?: Maybe<UserUpdateWithoutPostsDataInput>;
  upsert?: Maybe<UserUpsertWithoutPostsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface InterestWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  interesting?: Maybe<String>;
  interesting_not?: Maybe<String>;
  interesting_in?: Maybe<String[] | String>;
  interesting_not_in?: Maybe<String[] | String>;
  interesting_lt?: Maybe<String>;
  interesting_lte?: Maybe<String>;
  interesting_gt?: Maybe<String>;
  interesting_gte?: Maybe<String>;
  interesting_contains?: Maybe<String>;
  interesting_not_contains?: Maybe<String>;
  interesting_starts_with?: Maybe<String>;
  interesting_not_starts_with?: Maybe<String>;
  interesting_ends_with?: Maybe<String>;
  interesting_not_ends_with?: Maybe<String>;
  AND?: Maybe<InterestWhereInput[] | InterestWhereInput>;
  OR?: Maybe<InterestWhereInput[] | InterestWhereInput>;
  NOT?: Maybe<InterestWhereInput[] | InterestWhereInput>;
}

export interface UserUpdateWithoutPostsDataInput {
  nickName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  profileLink?: Maybe<String>;
  admin?: Maybe<Boolean>;
  isFollowing?: Maybe<Boolean>;
  isMe?: Maybe<Boolean>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  likes?: Maybe<LikeUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  interests?: Maybe<InterestUpdateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  nickName?: Maybe<String>;
  nickName_not?: Maybe<String>;
  nickName_in?: Maybe<String[] | String>;
  nickName_not_in?: Maybe<String[] | String>;
  nickName_lt?: Maybe<String>;
  nickName_lte?: Maybe<String>;
  nickName_gt?: Maybe<String>;
  nickName_gte?: Maybe<String>;
  nickName_contains?: Maybe<String>;
  nickName_not_contains?: Maybe<String>;
  nickName_starts_with?: Maybe<String>;
  nickName_not_starts_with?: Maybe<String>;
  nickName_ends_with?: Maybe<String>;
  nickName_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  profileLink?: Maybe<String>;
  profileLink_not?: Maybe<String>;
  profileLink_in?: Maybe<String[] | String>;
  profileLink_not_in?: Maybe<String[] | String>;
  profileLink_lt?: Maybe<String>;
  profileLink_lte?: Maybe<String>;
  profileLink_gt?: Maybe<String>;
  profileLink_gte?: Maybe<String>;
  profileLink_contains?: Maybe<String>;
  profileLink_not_contains?: Maybe<String>;
  profileLink_starts_with?: Maybe<String>;
  profileLink_not_starts_with?: Maybe<String>;
  profileLink_ends_with?: Maybe<String>;
  profileLink_not_ends_with?: Maybe<String>;
  admin?: Maybe<Boolean>;
  admin_not?: Maybe<Boolean>;
  isFollowing?: Maybe<Boolean>;
  isFollowing_not?: Maybe<Boolean>;
  isMe?: Maybe<Boolean>;
  isMe_not?: Maybe<Boolean>;
  followers_every?: Maybe<UserWhereInput>;
  followers_some?: Maybe<UserWhereInput>;
  followers_none?: Maybe<UserWhereInput>;
  following_every?: Maybe<UserWhereInput>;
  following_some?: Maybe<UserWhereInput>;
  following_none?: Maybe<UserWhereInput>;
  posts_every?: Maybe<PostWhereInput>;
  posts_some?: Maybe<PostWhereInput>;
  posts_none?: Maybe<PostWhereInput>;
  likes_every?: Maybe<LikeWhereInput>;
  likes_some?: Maybe<LikeWhereInput>;
  likes_none?: Maybe<LikeWhereInput>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  interests_every?: Maybe<InterestWhereInput>;
  interests_some?: Maybe<InterestWhereInput>;
  interests_none?: Maybe<InterestWhereInput>;
  loginSecret?: Maybe<String>;
  loginSecret_not?: Maybe<String>;
  loginSecret_in?: Maybe<String[] | String>;
  loginSecret_not_in?: Maybe<String[] | String>;
  loginSecret_lt?: Maybe<String>;
  loginSecret_lte?: Maybe<String>;
  loginSecret_gt?: Maybe<String>;
  loginSecret_gte?: Maybe<String>;
  loginSecret_contains?: Maybe<String>;
  loginSecret_not_contains?: Maybe<String>;
  loginSecret_starts_with?: Maybe<String>;
  loginSecret_not_starts_with?: Maybe<String>;
  loginSecret_ends_with?: Maybe<String>;
  loginSecret_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface CommentUpdateManyWithoutUserInput {
  create?: Maybe<
    CommentCreateWithoutUserInput[] | CommentCreateWithoutUserInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutUserInput[]
    | CommentUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutUserInput[]
    | CommentUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CommentWhereInput>;
  AND?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  OR?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  NOT?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
}

export interface CommentUpdateWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutUserDataInput;
}

export interface PostUpdateManyMutationInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
  markerLink?: Maybe<String>;
  imageLink?: Maybe<String>;
  latitude?: Maybe<String>;
  longitude?: Maybe<String>;
  tags?: Maybe<String>;
  hiddenTags?: Maybe<String>;
  numOfViews?: Maybe<Int>;
  isLiked?: Maybe<Boolean>;
}

export interface CommentUpdateWithoutUserDataInput {
  post?: Maybe<PostUpdateOneWithoutCommentsInput>;
  text?: Maybe<String>;
}

export interface LikeUpdateInput {
  user?: Maybe<UserUpdateOneWithoutLikesInput>;
  post?: Maybe<PostUpdateOneWithoutLikesInput>;
}

export interface PostUpdateOneWithoutCommentsInput {
  create?: Maybe<PostCreateWithoutCommentsInput>;
  update?: Maybe<PostUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<PostUpsertWithoutCommentsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface UserUpsertWithoutInterestsInput {
  update: UserUpdateWithoutInterestsDataInput;
  create: UserCreateWithoutInterestsInput;
}

export interface PostUpdateWithoutCommentsDataInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
  markerLink?: Maybe<String>;
  imageLink?: Maybe<String>;
  latitude?: Maybe<String>;
  longitude?: Maybe<String>;
  tags?: Maybe<String>;
  hiddenTags?: Maybe<String>;
  numOfViews?: Maybe<Int>;
  isLiked?: Maybe<Boolean>;
  user?: Maybe<UserUpdateOneWithoutPostsInput>;
  contents?: Maybe<ContentUpdateManyWithoutPostInput>;
  likes?: Maybe<LikeUpdateManyWithoutPostInput>;
}

export interface InterestUpdateInput {
  user?: Maybe<UserUpdateOneWithoutInterestsInput>;
  interesting?: Maybe<String>;
}

export interface PostUpsertWithoutCommentsInput {
  update: PostUpdateWithoutCommentsDataInput;
  create: PostCreateWithoutCommentsInput;
}

export interface InterestCreateInput {
  id?: Maybe<ID_Input>;
  user?: Maybe<UserCreateOneWithoutInterestsInput>;
  interesting: String;
}

export interface CommentUpsertWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutUserDataInput;
  create: CommentCreateWithoutUserInput;
}

export interface PostUpdateWithoutContentsDataInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
  markerLink?: Maybe<String>;
  imageLink?: Maybe<String>;
  latitude?: Maybe<String>;
  longitude?: Maybe<String>;
  tags?: Maybe<String>;
  hiddenTags?: Maybe<String>;
  numOfViews?: Maybe<Int>;
  isLiked?: Maybe<Boolean>;
  user?: Maybe<UserUpdateOneWithoutPostsInput>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
  likes?: Maybe<LikeUpdateManyWithoutPostInput>;
}

export interface InterestUpdateManyWithoutUserInput {
  create?: Maybe<
    InterestCreateWithoutUserInput[] | InterestCreateWithoutUserInput
  >;
  delete?: Maybe<InterestWhereUniqueInput[] | InterestWhereUniqueInput>;
  connect?: Maybe<InterestWhereUniqueInput[] | InterestWhereUniqueInput>;
  set?: Maybe<InterestWhereUniqueInput[] | InterestWhereUniqueInput>;
  disconnect?: Maybe<InterestWhereUniqueInput[] | InterestWhereUniqueInput>;
  update?: Maybe<
    | InterestUpdateWithWhereUniqueWithoutUserInput[]
    | InterestUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | InterestUpsertWithWhereUniqueWithoutUserInput[]
    | InterestUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<InterestScalarWhereInput[] | InterestScalarWhereInput>;
  updateMany?: Maybe<
    | InterestUpdateManyWithWhereNestedInput[]
    | InterestUpdateManyWithWhereNestedInput
  >;
}

export interface CommentCreateInput {
  id?: Maybe<ID_Input>;
  user?: Maybe<UserCreateOneWithoutCommentsInput>;
  post?: Maybe<PostCreateOneWithoutCommentsInput>;
  text: String;
}

export interface InterestUpdateWithWhereUniqueWithoutUserInput {
  where: InterestWhereUniqueInput;
  data: InterestUpdateWithoutUserDataInput;
}

export interface UserCreateWithoutFollowingInput {
  id?: Maybe<ID_Input>;
  nickName: String;
  email: String;
  password: String;
  profileLink: String;
  admin?: Maybe<Boolean>;
  isFollowing?: Maybe<Boolean>;
  isMe?: Maybe<Boolean>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  likes?: Maybe<LikeCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  interests?: Maybe<InterestCreateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface InterestUpdateWithoutUserDataInput {
  interesting?: Maybe<String>;
}

export interface ContentCreateWithoutPostInput {
  id?: Maybe<ID_Input>;
  link: String;
  type: Boolean;
}

export interface InterestUpsertWithWhereUniqueWithoutUserInput {
  where: InterestWhereUniqueInput;
  update: InterestUpdateWithoutUserDataInput;
  create: InterestCreateWithoutUserInput;
}

export interface LikeCreateWithoutPostInput {
  id?: Maybe<ID_Input>;
  user?: Maybe<UserCreateOneWithoutLikesInput>;
}

export interface InterestScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  interesting?: Maybe<String>;
  interesting_not?: Maybe<String>;
  interesting_in?: Maybe<String[] | String>;
  interesting_not_in?: Maybe<String[] | String>;
  interesting_lt?: Maybe<String>;
  interesting_lte?: Maybe<String>;
  interesting_gt?: Maybe<String>;
  interesting_gte?: Maybe<String>;
  interesting_contains?: Maybe<String>;
  interesting_not_contains?: Maybe<String>;
  interesting_starts_with?: Maybe<String>;
  interesting_not_starts_with?: Maybe<String>;
  interesting_ends_with?: Maybe<String>;
  interesting_not_ends_with?: Maybe<String>;
  AND?: Maybe<InterestScalarWhereInput[] | InterestScalarWhereInput>;
  OR?: Maybe<InterestScalarWhereInput[] | InterestScalarWhereInput>;
  NOT?: Maybe<InterestScalarWhereInput[] | InterestScalarWhereInput>;
}

export interface UserCreateWithoutFollowersInput {
  id?: Maybe<ID_Input>;
  nickName: String;
  email: String;
  password: String;
  profileLink: String;
  admin?: Maybe<Boolean>;
  isFollowing?: Maybe<Boolean>;
  isMe?: Maybe<Boolean>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  likes?: Maybe<LikeCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  interests?: Maybe<InterestCreateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface InterestUpdateManyWithWhereNestedInput {
  where: InterestScalarWhereInput;
  data: InterestUpdateManyDataInput;
}

export interface PostCreateWithoutLikesInput {
  id?: Maybe<ID_Input>;
  title: String;
  content: String;
  markerLink: String;
  imageLink: String;
  latitude: String;
  longitude: String;
  tags: String;
  hiddenTags: String;
  numOfViews?: Maybe<Int>;
  isLiked?: Maybe<Boolean>;
  user?: Maybe<UserCreateOneWithoutPostsInput>;
  contents?: Maybe<ContentCreateManyWithoutPostInput>;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
}

export interface InterestUpdateManyDataInput {
  interesting?: Maybe<String>;
}

export interface CommentCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  post?: Maybe<PostCreateOneWithoutCommentsInput>;
  text: String;
}

export interface UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput;
  create: UserCreateWithoutPostsInput;
}

export interface InterestCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  interesting: String;
}

export interface PostUpsertWithoutLikesInput {
  update: PostUpdateWithoutLikesDataInput;
  create: PostCreateWithoutLikesInput;
}

export interface PostWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  markerLink?: Maybe<String>;
  markerLink_not?: Maybe<String>;
  markerLink_in?: Maybe<String[] | String>;
  markerLink_not_in?: Maybe<String[] | String>;
  markerLink_lt?: Maybe<String>;
  markerLink_lte?: Maybe<String>;
  markerLink_gt?: Maybe<String>;
  markerLink_gte?: Maybe<String>;
  markerLink_contains?: Maybe<String>;
  markerLink_not_contains?: Maybe<String>;
  markerLink_starts_with?: Maybe<String>;
  markerLink_not_starts_with?: Maybe<String>;
  markerLink_ends_with?: Maybe<String>;
  markerLink_not_ends_with?: Maybe<String>;
  imageLink?: Maybe<String>;
  imageLink_not?: Maybe<String>;
  imageLink_in?: Maybe<String[] | String>;
  imageLink_not_in?: Maybe<String[] | String>;
  imageLink_lt?: Maybe<String>;
  imageLink_lte?: Maybe<String>;
  imageLink_gt?: Maybe<String>;
  imageLink_gte?: Maybe<String>;
  imageLink_contains?: Maybe<String>;
  imageLink_not_contains?: Maybe<String>;
  imageLink_starts_with?: Maybe<String>;
  imageLink_not_starts_with?: Maybe<String>;
  imageLink_ends_with?: Maybe<String>;
  imageLink_not_ends_with?: Maybe<String>;
  latitude?: Maybe<String>;
  latitude_not?: Maybe<String>;
  latitude_in?: Maybe<String[] | String>;
  latitude_not_in?: Maybe<String[] | String>;
  latitude_lt?: Maybe<String>;
  latitude_lte?: Maybe<String>;
  latitude_gt?: Maybe<String>;
  latitude_gte?: Maybe<String>;
  latitude_contains?: Maybe<String>;
  latitude_not_contains?: Maybe<String>;
  latitude_starts_with?: Maybe<String>;
  latitude_not_starts_with?: Maybe<String>;
  latitude_ends_with?: Maybe<String>;
  latitude_not_ends_with?: Maybe<String>;
  longitude?: Maybe<String>;
  longitude_not?: Maybe<String>;
  longitude_in?: Maybe<String[] | String>;
  longitude_not_in?: Maybe<String[] | String>;
  longitude_lt?: Maybe<String>;
  longitude_lte?: Maybe<String>;
  longitude_gt?: Maybe<String>;
  longitude_gte?: Maybe<String>;
  longitude_contains?: Maybe<String>;
  longitude_not_contains?: Maybe<String>;
  longitude_starts_with?: Maybe<String>;
  longitude_not_starts_with?: Maybe<String>;
  longitude_ends_with?: Maybe<String>;
  longitude_not_ends_with?: Maybe<String>;
  tags?: Maybe<String>;
  tags_not?: Maybe<String>;
  tags_in?: Maybe<String[] | String>;
  tags_not_in?: Maybe<String[] | String>;
  tags_lt?: Maybe<String>;
  tags_lte?: Maybe<String>;
  tags_gt?: Maybe<String>;
  tags_gte?: Maybe<String>;
  tags_contains?: Maybe<String>;
  tags_not_contains?: Maybe<String>;
  tags_starts_with?: Maybe<String>;
  tags_not_starts_with?: Maybe<String>;
  tags_ends_with?: Maybe<String>;
  tags_not_ends_with?: Maybe<String>;
  hiddenTags?: Maybe<String>;
  hiddenTags_not?: Maybe<String>;
  hiddenTags_in?: Maybe<String[] | String>;
  hiddenTags_not_in?: Maybe<String[] | String>;
  hiddenTags_lt?: Maybe<String>;
  hiddenTags_lte?: Maybe<String>;
  hiddenTags_gt?: Maybe<String>;
  hiddenTags_gte?: Maybe<String>;
  hiddenTags_contains?: Maybe<String>;
  hiddenTags_not_contains?: Maybe<String>;
  hiddenTags_starts_with?: Maybe<String>;
  hiddenTags_not_starts_with?: Maybe<String>;
  hiddenTags_ends_with?: Maybe<String>;
  hiddenTags_not_ends_with?: Maybe<String>;
  numOfViews?: Maybe<Int>;
  numOfViews_not?: Maybe<Int>;
  numOfViews_in?: Maybe<Int[] | Int>;
  numOfViews_not_in?: Maybe<Int[] | Int>;
  numOfViews_lt?: Maybe<Int>;
  numOfViews_lte?: Maybe<Int>;
  numOfViews_gt?: Maybe<Int>;
  numOfViews_gte?: Maybe<Int>;
  isLiked?: Maybe<Boolean>;
  isLiked_not?: Maybe<Boolean>;
  user?: Maybe<UserWhereInput>;
  contents_every?: Maybe<ContentWhereInput>;
  contents_some?: Maybe<ContentWhereInput>;
  contents_none?: Maybe<ContentWhereInput>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  likes_every?: Maybe<LikeWhereInput>;
  likes_some?: Maybe<LikeWhereInput>;
  likes_none?: Maybe<LikeWhereInput>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PostWhereInput[] | PostWhereInput>;
  OR?: Maybe<PostWhereInput[] | PostWhereInput>;
  NOT?: Maybe<PostWhereInput[] | PostWhereInput>;
}

export interface LikeUpsertWithWhereUniqueWithoutUserInput {
  where: LikeWhereUniqueInput;
  update: LikeUpdateWithoutUserDataInput;
  create: LikeCreateWithoutUserInput;
}

export interface UserUpdateInput {
  nickName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  profileLink?: Maybe<String>;
  admin?: Maybe<Boolean>;
  isFollowing?: Maybe<Boolean>;
  isMe?: Maybe<Boolean>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  likes?: Maybe<LikeUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  interests?: Maybe<InterestUpdateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface LikeScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  AND?: Maybe<LikeScalarWhereInput[] | LikeScalarWhereInput>;
  OR?: Maybe<LikeScalarWhereInput[] | LikeScalarWhereInput>;
  NOT?: Maybe<LikeScalarWhereInput[] | LikeScalarWhereInput>;
}

export interface InterestUpdateManyMutationInput {
  interesting?: Maybe<String>;
}

export interface UserUpsertWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutFollowersDataInput;
  create: UserCreateWithoutFollowersInput;
}

export interface UserCreateOneWithoutInterestsInput {
  create?: Maybe<UserCreateWithoutInterestsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  nickName?: Maybe<String>;
  nickName_not?: Maybe<String>;
  nickName_in?: Maybe<String[] | String>;
  nickName_not_in?: Maybe<String[] | String>;
  nickName_lt?: Maybe<String>;
  nickName_lte?: Maybe<String>;
  nickName_gt?: Maybe<String>;
  nickName_gte?: Maybe<String>;
  nickName_contains?: Maybe<String>;
  nickName_not_contains?: Maybe<String>;
  nickName_starts_with?: Maybe<String>;
  nickName_not_starts_with?: Maybe<String>;
  nickName_ends_with?: Maybe<String>;
  nickName_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  profileLink?: Maybe<String>;
  profileLink_not?: Maybe<String>;
  profileLink_in?: Maybe<String[] | String>;
  profileLink_not_in?: Maybe<String[] | String>;
  profileLink_lt?: Maybe<String>;
  profileLink_lte?: Maybe<String>;
  profileLink_gt?: Maybe<String>;
  profileLink_gte?: Maybe<String>;
  profileLink_contains?: Maybe<String>;
  profileLink_not_contains?: Maybe<String>;
  profileLink_starts_with?: Maybe<String>;
  profileLink_not_starts_with?: Maybe<String>;
  profileLink_ends_with?: Maybe<String>;
  profileLink_not_ends_with?: Maybe<String>;
  admin?: Maybe<Boolean>;
  admin_not?: Maybe<Boolean>;
  isFollowing?: Maybe<Boolean>;
  isFollowing_not?: Maybe<Boolean>;
  isMe?: Maybe<Boolean>;
  isMe_not?: Maybe<Boolean>;
  loginSecret?: Maybe<String>;
  loginSecret_not?: Maybe<String>;
  loginSecret_in?: Maybe<String[] | String>;
  loginSecret_not_in?: Maybe<String[] | String>;
  loginSecret_lt?: Maybe<String>;
  loginSecret_lte?: Maybe<String>;
  loginSecret_gt?: Maybe<String>;
  loginSecret_gte?: Maybe<String>;
  loginSecret_contains?: Maybe<String>;
  loginSecret_not_contains?: Maybe<String>;
  loginSecret_starts_with?: Maybe<String>;
  loginSecret_not_starts_with?: Maybe<String>;
  loginSecret_ends_with?: Maybe<String>;
  loginSecret_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface ContentUpdateInput {
  post?: Maybe<PostUpdateOneWithoutContentsInput>;
  link?: Maybe<String>;
  type?: Maybe<Boolean>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface PostCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  title: String;
  content: String;
  markerLink: String;
  imageLink: String;
  latitude: String;
  longitude: String;
  tags: String;
  hiddenTags: String;
  numOfViews?: Maybe<Int>;
  isLiked?: Maybe<Boolean>;
  contents?: Maybe<ContentCreateManyWithoutPostInput>;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
  likes?: Maybe<LikeCreateManyWithoutPostInput>;
}

export interface UserUpdateManyDataInput {
  nickName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  profileLink?: Maybe<String>;
  admin?: Maybe<Boolean>;
  isFollowing?: Maybe<Boolean>;
  isMe?: Maybe<Boolean>;
  loginSecret?: Maybe<String>;
}

export interface UserCreateWithoutLikesInput {
  id?: Maybe<ID_Input>;
  nickName: String;
  email: String;
  password: String;
  profileLink: String;
  admin?: Maybe<Boolean>;
  isFollowing?: Maybe<Boolean>;
  isMe?: Maybe<Boolean>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  interests?: Maybe<InterestCreateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface UserUpsertWithoutLikesInput {
  update: UserUpdateWithoutLikesDataInput;
  create: UserCreateWithoutLikesInput;
}

export interface UserCreateWithoutPostsInput {
  id?: Maybe<ID_Input>;
  nickName: String;
  email: String;
  password: String;
  profileLink: String;
  admin?: Maybe<Boolean>;
  isFollowing?: Maybe<Boolean>;
  isMe?: Maybe<Boolean>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  likes?: Maybe<LikeCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  interests?: Maybe<InterestCreateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface LikeUpsertWithWhereUniqueWithoutPostInput {
  where: LikeWhereUniqueInput;
  update: LikeUpdateWithoutPostDataInput;
  create: LikeCreateWithoutPostInput;
}

export interface UserUpdateOneWithoutCommentsInput {
  create?: Maybe<UserCreateWithoutCommentsInput>;
  update?: Maybe<UserUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<UserUpsertWithoutCommentsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface PostUpsertWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutUserDataInput;
  create: PostCreateWithoutUserInput;
}

export interface PostCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  content: String;
  markerLink: String;
  imageLink: String;
  latitude: String;
  longitude: String;
  tags: String;
  hiddenTags: String;
  numOfViews?: Maybe<Int>;
  isLiked?: Maybe<Boolean>;
  user?: Maybe<UserCreateOneWithoutPostsInput>;
  contents?: Maybe<ContentCreateManyWithoutPostInput>;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
  likes?: Maybe<LikeCreateManyWithoutPostInput>;
}

export interface PostScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  markerLink?: Maybe<String>;
  markerLink_not?: Maybe<String>;
  markerLink_in?: Maybe<String[] | String>;
  markerLink_not_in?: Maybe<String[] | String>;
  markerLink_lt?: Maybe<String>;
  markerLink_lte?: Maybe<String>;
  markerLink_gt?: Maybe<String>;
  markerLink_gte?: Maybe<String>;
  markerLink_contains?: Maybe<String>;
  markerLink_not_contains?: Maybe<String>;
  markerLink_starts_with?: Maybe<String>;
  markerLink_not_starts_with?: Maybe<String>;
  markerLink_ends_with?: Maybe<String>;
  markerLink_not_ends_with?: Maybe<String>;
  imageLink?: Maybe<String>;
  imageLink_not?: Maybe<String>;
  imageLink_in?: Maybe<String[] | String>;
  imageLink_not_in?: Maybe<String[] | String>;
  imageLink_lt?: Maybe<String>;
  imageLink_lte?: Maybe<String>;
  imageLink_gt?: Maybe<String>;
  imageLink_gte?: Maybe<String>;
  imageLink_contains?: Maybe<String>;
  imageLink_not_contains?: Maybe<String>;
  imageLink_starts_with?: Maybe<String>;
  imageLink_not_starts_with?: Maybe<String>;
  imageLink_ends_with?: Maybe<String>;
  imageLink_not_ends_with?: Maybe<String>;
  latitude?: Maybe<String>;
  latitude_not?: Maybe<String>;
  latitude_in?: Maybe<String[] | String>;
  latitude_not_in?: Maybe<String[] | String>;
  latitude_lt?: Maybe<String>;
  latitude_lte?: Maybe<String>;
  latitude_gt?: Maybe<String>;
  latitude_gte?: Maybe<String>;
  latitude_contains?: Maybe<String>;
  latitude_not_contains?: Maybe<String>;
  latitude_starts_with?: Maybe<String>;
  latitude_not_starts_with?: Maybe<String>;
  latitude_ends_with?: Maybe<String>;
  latitude_not_ends_with?: Maybe<String>;
  longitude?: Maybe<String>;
  longitude_not?: Maybe<String>;
  longitude_in?: Maybe<String[] | String>;
  longitude_not_in?: Maybe<String[] | String>;
  longitude_lt?: Maybe<String>;
  longitude_lte?: Maybe<String>;
  longitude_gt?: Maybe<String>;
  longitude_gte?: Maybe<String>;
  longitude_contains?: Maybe<String>;
  longitude_not_contains?: Maybe<String>;
  longitude_starts_with?: Maybe<String>;
  longitude_not_starts_with?: Maybe<String>;
  longitude_ends_with?: Maybe<String>;
  longitude_not_ends_with?: Maybe<String>;
  tags?: Maybe<String>;
  tags_not?: Maybe<String>;
  tags_in?: Maybe<String[] | String>;
  tags_not_in?: Maybe<String[] | String>;
  tags_lt?: Maybe<String>;
  tags_lte?: Maybe<String>;
  tags_gt?: Maybe<String>;
  tags_gte?: Maybe<String>;
  tags_contains?: Maybe<String>;
  tags_not_contains?: Maybe<String>;
  tags_starts_with?: Maybe<String>;
  tags_not_starts_with?: Maybe<String>;
  tags_ends_with?: Maybe<String>;
  tags_not_ends_with?: Maybe<String>;
  hiddenTags?: Maybe<String>;
  hiddenTags_not?: Maybe<String>;
  hiddenTags_in?: Maybe<String[] | String>;
  hiddenTags_not_in?: Maybe<String[] | String>;
  hiddenTags_lt?: Maybe<String>;
  hiddenTags_lte?: Maybe<String>;
  hiddenTags_gt?: Maybe<String>;
  hiddenTags_gte?: Maybe<String>;
  hiddenTags_contains?: Maybe<String>;
  hiddenTags_not_contains?: Maybe<String>;
  hiddenTags_starts_with?: Maybe<String>;
  hiddenTags_not_starts_with?: Maybe<String>;
  hiddenTags_ends_with?: Maybe<String>;
  hiddenTags_not_ends_with?: Maybe<String>;
  numOfViews?: Maybe<Int>;
  numOfViews_not?: Maybe<Int>;
  numOfViews_in?: Maybe<Int[] | Int>;
  numOfViews_not_in?: Maybe<Int[] | Int>;
  numOfViews_lt?: Maybe<Int>;
  numOfViews_lte?: Maybe<Int>;
  numOfViews_gt?: Maybe<Int>;
  numOfViews_gte?: Maybe<Int>;
  isLiked?: Maybe<Boolean>;
  isLiked_not?: Maybe<Boolean>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  OR?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  NOT?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
}

export interface PostUpsertWithoutContentsInput {
  update: PostUpdateWithoutContentsDataInput;
  create: PostCreateWithoutContentsInput;
}

export interface PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput;
  data: PostUpdateManyDataInput;
}

export interface CommentCreateWithoutPostInput {
  id?: Maybe<ID_Input>;
  user?: Maybe<UserCreateOneWithoutCommentsInput>;
  text: String;
}

export interface PostUpdateManyDataInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
  markerLink?: Maybe<String>;
  imageLink?: Maybe<String>;
  latitude?: Maybe<String>;
  longitude?: Maybe<String>;
  tags?: Maybe<String>;
  hiddenTags?: Maybe<String>;
  numOfViews?: Maybe<Int>;
  isLiked?: Maybe<Boolean>;
}

export interface PostCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  title: String;
  content: String;
  markerLink: String;
  imageLink: String;
  latitude: String;
  longitude: String;
  tags: String;
  hiddenTags: String;
  numOfViews?: Maybe<Int>;
  isLiked?: Maybe<Boolean>;
  user?: Maybe<UserCreateOneWithoutPostsInput>;
  contents?: Maybe<ContentCreateManyWithoutPostInput>;
  likes?: Maybe<LikeCreateManyWithoutPostInput>;
}

export interface PostCreateOneWithoutContentsInput {
  create?: Maybe<PostCreateWithoutContentsInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface CommentUpdateManyMutationInput {
  text?: Maybe<String>;
}

export interface UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput;
  create: UserCreateWithoutCommentsInput;
}

export interface UserUpsertWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutFollowingDataInput;
  create: UserCreateWithoutFollowingInput;
}

export interface InterestSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<InterestWhereInput>;
  AND?: Maybe<
    InterestSubscriptionWhereInput[] | InterestSubscriptionWhereInput
  >;
  OR?: Maybe<InterestSubscriptionWhereInput[] | InterestSubscriptionWhereInput>;
  NOT?: Maybe<
    InterestSubscriptionWhereInput[] | InterestSubscriptionWhereInput
  >;
}

export interface LikeCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  post?: Maybe<PostCreateOneWithoutLikesInput>;
}

export interface UserCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  nickName: String;
  email: String;
  password: String;
  profileLink: String;
  admin?: Maybe<Boolean>;
  isFollowing?: Maybe<Boolean>;
  isMe?: Maybe<Boolean>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  likes?: Maybe<LikeCreateManyWithoutUserInput>;
  interests?: Maybe<InterestCreateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface UserUpdateOneWithoutInterestsInput {
  create?: Maybe<UserCreateWithoutInterestsInput>;
  update?: Maybe<UserUpdateWithoutInterestsDataInput>;
  upsert?: Maybe<UserUpsertWithoutInterestsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  nickName: String;
  email: String;
  password: String;
  profileLink: String;
  admin: Boolean;
  isFollowing: Boolean;
  isMe: Boolean;
  loginSecret?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  nickName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  profileLink: () => Promise<String>;
  admin: () => Promise<Boolean>;
  isFollowing: () => Promise<Boolean>;
  isMe: () => Promise<Boolean>;
  loginSecret: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  nickName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  profileLink: () => Promise<AsyncIterator<String>>;
  admin: () => Promise<AsyncIterator<Boolean>>;
  isFollowing: () => Promise<AsyncIterator<Boolean>>;
  isMe: () => Promise<AsyncIterator<Boolean>>;
  loginSecret: () => Promise<AsyncIterator<String>>;
}

export interface CommentEdge {
  node: Comment;
  cursor: String;
}

export interface CommentEdgePromise extends Promise<CommentEdge>, Fragmentable {
  node: <T = CommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CommentEdgeSubscription
  extends Promise<AsyncIterator<CommentEdge>>,
    Fragmentable {
  node: <T = CommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Post {
  id: ID_Output;
  title: String;
  content: String;
  markerLink: String;
  imageLink: String;
  latitude: String;
  longitude: String;
  tags: String;
  hiddenTags: String;
  numOfViews: Int;
  isLiked: Boolean;
  date?: DateTimeOutput;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  markerLink: () => Promise<String>;
  imageLink: () => Promise<String>;
  latitude: () => Promise<String>;
  longitude: () => Promise<String>;
  tags: () => Promise<String>;
  hiddenTags: () => Promise<String>;
  numOfViews: () => Promise<Int>;
  isLiked: () => Promise<Boolean>;
  user: <T = UserPromise>() => T;
  contents: <T = FragmentableArray<Content>>(args?: {
    where?: ContentWhereInput;
    orderBy?: ContentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likes: <T = FragmentableArray<Like>>(args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  date: () => Promise<DateTimeOutput>;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  markerLink: () => Promise<AsyncIterator<String>>;
  imageLink: () => Promise<AsyncIterator<String>>;
  latitude: () => Promise<AsyncIterator<String>>;
  longitude: () => Promise<AsyncIterator<String>>;
  tags: () => Promise<AsyncIterator<String>>;
  hiddenTags: () => Promise<AsyncIterator<String>>;
  numOfViews: () => Promise<AsyncIterator<Int>>;
  isLiked: () => Promise<AsyncIterator<Boolean>>;
  user: <T = UserSubscription>() => T;
  contents: <T = Promise<AsyncIterator<ContentSubscription>>>(args?: {
    where?: ContentWhereInput;
    orderBy?: ContentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likes: <T = Promise<AsyncIterator<LikeSubscription>>>(args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostNullablePromise
  extends Promise<Post | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  markerLink: () => Promise<String>;
  imageLink: () => Promise<String>;
  latitude: () => Promise<String>;
  longitude: () => Promise<String>;
  tags: () => Promise<String>;
  hiddenTags: () => Promise<String>;
  numOfViews: () => Promise<Int>;
  isLiked: () => Promise<Boolean>;
  user: <T = UserPromise>() => T;
  contents: <T = FragmentableArray<Content>>(args?: {
    where?: ContentWhereInput;
    orderBy?: ContentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likes: <T = FragmentableArray<Like>>(args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  date: () => Promise<DateTimeOutput>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CommentConnection {
  pageInfo: PageInfo;
  edges: CommentEdge[];
}

export interface CommentConnectionPromise
  extends Promise<CommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CommentEdge>>() => T;
  aggregate: <T = AggregateCommentPromise>() => T;
}

export interface CommentConnectionSubscription
  extends Promise<AsyncIterator<CommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommentSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Interest {
  id: ID_Output;
  interesting: String;
}

export interface InterestPromise extends Promise<Interest>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  interesting: () => Promise<String>;
}

export interface InterestSubscription
  extends Promise<AsyncIterator<Interest>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  interesting: () => Promise<AsyncIterator<String>>;
}

export interface InterestNullablePromise
  extends Promise<Interest | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  interesting: () => Promise<String>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface User {
  id: ID_Output;
  nickName: String;
  email: String;
  password: String;
  profileLink: String;
  admin: Boolean;
  isFollowing: Boolean;
  isMe: Boolean;
  loginSecret?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  nickName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  profileLink: () => Promise<String>;
  admin: () => Promise<Boolean>;
  isFollowing: () => Promise<Boolean>;
  isMe: () => Promise<Boolean>;
  followers: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  following: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likes: <T = FragmentableArray<Like>>(args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  interests: <T = FragmentableArray<Interest>>(args?: {
    where?: InterestWhereInput;
    orderBy?: InterestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  loginSecret: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  nickName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  profileLink: () => Promise<AsyncIterator<String>>;
  admin: () => Promise<AsyncIterator<Boolean>>;
  isFollowing: () => Promise<AsyncIterator<Boolean>>;
  isMe: () => Promise<AsyncIterator<Boolean>>;
  followers: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  following: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likes: <T = Promise<AsyncIterator<LikeSubscription>>>(args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  interests: <T = Promise<AsyncIterator<InterestSubscription>>>(args?: {
    where?: InterestWhereInput;
    orderBy?: InterestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  loginSecret: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  nickName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  profileLink: () => Promise<String>;
  admin: () => Promise<Boolean>;
  isFollowing: () => Promise<Boolean>;
  isMe: () => Promise<Boolean>;
  followers: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  following: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likes: <T = FragmentableArray<Like>>(args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  interests: <T = FragmentableArray<Interest>>(args?: {
    where?: InterestWhereInput;
    orderBy?: InterestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  loginSecret: () => Promise<String>;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Like {
  id: ID_Output;
}

export interface LikePromise extends Promise<Like>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  post: <T = PostPromise>() => T;
}

export interface LikeSubscription
  extends Promise<AsyncIterator<Like>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  post: <T = PostSubscription>() => T;
}

export interface LikeNullablePromise
  extends Promise<Like | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  post: <T = PostPromise>() => T;
}

export interface AggregateLike {
  count: Int;
}

export interface AggregateLikePromise
  extends Promise<AggregateLike>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLikeSubscription
  extends Promise<AsyncIterator<AggregateLike>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Comment {
  id: ID_Output;
  text: String;
  date?: DateTimeOutput;
}

export interface CommentPromise extends Promise<Comment>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  post: <T = PostPromise>() => T;
  text: () => Promise<String>;
  date: () => Promise<DateTimeOutput>;
}

export interface CommentSubscription
  extends Promise<AsyncIterator<Comment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  post: <T = PostSubscription>() => T;
  text: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CommentNullablePromise
  extends Promise<Comment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  post: <T = PostPromise>() => T;
  text: () => Promise<String>;
  date: () => Promise<DateTimeOutput>;
}

export interface LikeConnection {
  pageInfo: PageInfo;
  edges: LikeEdge[];
}

export interface LikeConnectionPromise
  extends Promise<LikeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LikeEdge>>() => T;
  aggregate: <T = AggregateLikePromise>() => T;
}

export interface LikeConnectionSubscription
  extends Promise<AsyncIterator<LikeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LikeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLikeSubscription>() => T;
}

export interface CommentSubscriptionPayload {
  mutation: MutationType;
  node: Comment;
  updatedFields: String[];
  previousValues: CommentPreviousValues;
}

export interface CommentSubscriptionPayloadPromise
  extends Promise<CommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CommentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommentPreviousValuesPromise>() => T;
}

export interface CommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommentPreviousValuesSubscription>() => T;
}

export interface InterestEdge {
  node: Interest;
  cursor: String;
}

export interface InterestEdgePromise
  extends Promise<InterestEdge>,
    Fragmentable {
  node: <T = InterestPromise>() => T;
  cursor: () => Promise<String>;
}

export interface InterestEdgeSubscription
  extends Promise<AsyncIterator<InterestEdge>>,
    Fragmentable {
  node: <T = InterestSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CommentPreviousValues {
  id: ID_Output;
  text: String;
  date?: DateTimeOutput;
}

export interface CommentPreviousValuesPromise
  extends Promise<CommentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  date: () => Promise<DateTimeOutput>;
}

export interface CommentPreviousValuesSubscription
  extends Promise<AsyncIterator<CommentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateContent {
  count: Int;
}

export interface AggregateContentPromise
  extends Promise<AggregateContent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateContentSubscription
  extends Promise<AsyncIterator<AggregateContent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostPreviousValues {
  id: ID_Output;
  title: String;
  content: String;
  markerLink: String;
  imageLink: String;
  latitude: String;
  longitude: String;
  tags: String;
  hiddenTags: String;
  numOfViews: Int;
  isLiked: Boolean;
  date?: DateTimeOutput;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  markerLink: () => Promise<String>;
  imageLink: () => Promise<String>;
  latitude: () => Promise<String>;
  longitude: () => Promise<String>;
  tags: () => Promise<String>;
  hiddenTags: () => Promise<String>;
  numOfViews: () => Promise<Int>;
  isLiked: () => Promise<Boolean>;
  date: () => Promise<DateTimeOutput>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  markerLink: () => Promise<AsyncIterator<String>>;
  imageLink: () => Promise<AsyncIterator<String>>;
  latitude: () => Promise<AsyncIterator<String>>;
  longitude: () => Promise<AsyncIterator<String>>;
  tags: () => Promise<AsyncIterator<String>>;
  hiddenTags: () => Promise<AsyncIterator<String>>;
  numOfViews: () => Promise<AsyncIterator<Int>>;
  isLiked: () => Promise<AsyncIterator<Boolean>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ContentConnection {
  pageInfo: PageInfo;
  edges: ContentEdge[];
}

export interface ContentConnectionPromise
  extends Promise<ContentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ContentEdge>>() => T;
  aggregate: <T = AggregateContentPromise>() => T;
}

export interface ContentConnectionSubscription
  extends Promise<AsyncIterator<ContentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ContentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateContentSubscription>() => T;
}

export interface ContentSubscriptionPayload {
  mutation: MutationType;
  node: Content;
  updatedFields: String[];
  previousValues: ContentPreviousValues;
}

export interface ContentSubscriptionPayloadPromise
  extends Promise<ContentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ContentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ContentPreviousValuesPromise>() => T;
}

export interface ContentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ContentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ContentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ContentPreviousValuesSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface ContentPreviousValues {
  id: ID_Output;
  link: String;
  type: Boolean;
}

export interface ContentPreviousValuesPromise
  extends Promise<ContentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  link: () => Promise<String>;
  type: () => Promise<Boolean>;
}

export interface ContentPreviousValuesSubscription
  extends Promise<AsyncIterator<ContentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  link: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<Boolean>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface LikeEdge {
  node: Like;
  cursor: String;
}

export interface LikeEdgePromise extends Promise<LikeEdge>, Fragmentable {
  node: <T = LikePromise>() => T;
  cursor: () => Promise<String>;
}

export interface LikeEdgeSubscription
  extends Promise<AsyncIterator<LikeEdge>>,
    Fragmentable {
  node: <T = LikeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface InterestSubscriptionPayload {
  mutation: MutationType;
  node: Interest;
  updatedFields: String[];
  previousValues: InterestPreviousValues;
}

export interface InterestSubscriptionPayloadPromise
  extends Promise<InterestSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = InterestPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = InterestPreviousValuesPromise>() => T;
}

export interface InterestSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<InterestSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = InterestSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = InterestPreviousValuesSubscription>() => T;
}

export interface InterestConnection {
  pageInfo: PageInfo;
  edges: InterestEdge[];
}

export interface InterestConnectionPromise
  extends Promise<InterestConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<InterestEdge>>() => T;
  aggregate: <T = AggregateInterestPromise>() => T;
}

export interface InterestConnectionSubscription
  extends Promise<AsyncIterator<InterestConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<InterestEdgeSubscription>>>() => T;
  aggregate: <T = AggregateInterestSubscription>() => T;
}

export interface AggregateComment {
  count: Int;
}

export interface AggregateCommentPromise
  extends Promise<AggregateComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommentSubscription
  extends Promise<AsyncIterator<AggregateComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LikePreviousValues {
  id: ID_Output;
}

export interface LikePreviousValuesPromise
  extends Promise<LikePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface LikePreviousValuesSubscription
  extends Promise<AsyncIterator<LikePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface LikeSubscriptionPayload {
  mutation: MutationType;
  node: Like;
  updatedFields: String[];
  previousValues: LikePreviousValues;
}

export interface LikeSubscriptionPayloadPromise
  extends Promise<LikeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LikePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LikePreviousValuesPromise>() => T;
}

export interface LikeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LikeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LikeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LikePreviousValuesSubscription>() => T;
}

export interface Content {
  id: ID_Output;
  link: String;
  type: Boolean;
}

export interface ContentPromise extends Promise<Content>, Fragmentable {
  id: () => Promise<ID_Output>;
  post: <T = PostPromise>() => T;
  link: () => Promise<String>;
  type: () => Promise<Boolean>;
}

export interface ContentSubscription
  extends Promise<AsyncIterator<Content>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  post: <T = PostSubscription>() => T;
  link: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<Boolean>>;
}

export interface ContentNullablePromise
  extends Promise<Content | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  post: <T = PostPromise>() => T;
  link: () => Promise<String>;
  type: () => Promise<Boolean>;
}

export interface InterestPreviousValues {
  id: ID_Output;
  interesting: String;
}

export interface InterestPreviousValuesPromise
  extends Promise<InterestPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  interesting: () => Promise<String>;
}

export interface InterestPreviousValuesSubscription
  extends Promise<AsyncIterator<InterestPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  interesting: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ContentEdge {
  node: Content;
  cursor: String;
}

export interface ContentEdgePromise extends Promise<ContentEdge>, Fragmentable {
  node: <T = ContentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ContentEdgeSubscription
  extends Promise<AsyncIterator<ContentEdge>>,
    Fragmentable {
  node: <T = ContentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateInterest {
  count: Int;
}

export interface AggregateInterestPromise
  extends Promise<AggregateInterest>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateInterestSubscription
  extends Promise<AsyncIterator<AggregateInterest>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  },
  {
    name: "Content",
    embedded: false
  },
  {
    name: "Comment",
    embedded: false
  },
  {
    name: "Like",
    embedded: false
  },
  {
    name: "Interest",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
